{"version":16,"variables":[{"key":"Scope","type":"code","visible":true,"input":"import { settingsObjectsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  const config = { schemaIds: 'builtin:management-zones'};\n  const objects = await settingsObjectsClient.getSettingsObjects(config);\n  let managementZones = objects.items.map(el => el.value.name);\n  managementZones = [\"Tenant\", ...managementZones]\n  return managementZones;\n}","multiple":false},{"key":"IncludeMonitoringCandidates","type":"csv","visible":true,"input":"YES,NO"}],"tiles":{"0":{"type":"code","title":"","input":"export default async function() {\n  return 'Software Obsolescence Management';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"1":{"type":"markdown","title":"","content":"#\n#### 💿 Stay Ahead Of Your Software Portfolio 💿\n\n "},"7":{"type":"data","title":"Technologies","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| filter isNotNull(Technology)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize `Technology Count` = countDistinct(Technology)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"Technology Count","valueAxisLabel":"Technology Count","tooltipVariant":"single","categoryAxis":["Technology Count"],"valueAxis":["Technology Count"]}},"singleValue":{"showLabel":false,"label":"Technology Count","prefixIcon":"","recordField":"Technology Count","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"Technology Count","rangeAxis":""}],"variant":"single","displayedFields":[]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"8":{"type":"data","title":"Processes","query":"fetch dt.entity.process_group_instance, from: -15m\n| filter arraySize(softwareTechnologies) > 0\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize `Process Count` = count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"Process Count","valueAxisLabel":"Process Count","tooltipVariant":"single","categoryAxis":["Process Count"],"valueAxis":["Process Count"]}},"singleValue":{"showLabel":false,"label":"Process Count","prefixIcon":"","recordField":"Process Count","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""}],"variant":"single","displayedFields":[]},"unitsOverrides":[{"identifier":"Process Count","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1728215429229}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"13":{"type":"data","title":"Libraries","query":"fetch dt.entity.software_component, from: -15m\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd softwareComponentFileName\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Type = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize libraryCount = countDistinct(Library)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"libraryCount","valueAxisLabel":"libraryCount","tooltipVariant":"single","categoryAxis":["libraryCount"],"valueAxis":["libraryCount"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryCount","prefixIcon":"","recordField":"libraryCount","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"libraryCount","rangeAxis":""}],"variant":"single","displayedFields":[]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"14":{"type":"data","title":"Library Versions","query":"fetch dt.entity.software_component, from: -15m\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize libraryVersionCount = countDistinct(entity.name)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"libraryVersionCount","valueAxisLabel":"libraryVersionCount","tooltipVariant":"single","categoryAxis":["libraryVersionCount"],"valueAxis":["libraryVersionCount"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"libraryVersionCount","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"libraryVersionCount","rangeAxis":""}],"variant":"single","displayedFields":[]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"17":{"type":"data","title":"Technologies Split by Process","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsRename Process = entity.name\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| fieldsAdd Link = event.link\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| fields Status, Process, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link, id\n| sort Status ASC, Technology ASC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["Status","Process","Technology","Edition","Running Version","Cycle Published At","Published at","id","Latest Version","Link","LTS","Cycle","End of Life"],"categoryAxisLabel":"Status,Process,Technology,Edition,Running Version,Cycle Published At,Published at,id,Latest Version,Link,LTS,Cycle,End of Life","valueAxis":["Max Age"],"valueAxisLabel":"Max Age","tooltipVariant":"single"}},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Max Age"},"displayedFields":["Status","Process","Technology","Edition","Running Version","Cycle Published At","Published at","id","Latest Version","Link","LTS","Cycle","End of Life"]},"histogram":{"dataMappings":[{"valueAxis":"Max Age","rangeAxis":""}],"variant":"single","displayedFields":["Status","Process","Technology","Edition","Running Version","id","Latest Version","Published at"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"18":{"type":"data","title":"Libraries Split by Process","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| fieldsAdd Link = event.link\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| fields Status, Technology, Library, `Running Version` = Version, `Published At` = substring(event.currentVersionPublishedAt, to:10), `Latest Stable Version` = event.latestStableVersion, `Published at` = substring(event.latestStableVersionPublishedAt, to:10), Age = age, `Top Vulnerability`, `Vulnerability Score`, Licenses = event.licenses, Link, id\n| sort Status DESC, `Vulnerability Score` DESC, Technology ASC, Library ASC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"Status,Technology,Library,Running Version,Published At,Latest Stable Version,Published at,Licenses,id,Link","valueAxisLabel":"Age,Vulnerability Score","tooltipVariant":"single","categoryAxis":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Licenses","id","Link"],"valueAxis":["Age","Vulnerability Score"]},"truncationMode":"middle","hiddenLegendFields":["entity"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"Library","prefixIcon":"","recordField":"Library","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125,"[\"Status\"]":160.1354217529297},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{"value":"Status"},"displayedFields":["Status","Technology","Library","Running Version","id"]},"histogram":{"dataMappings":[{"valueAxis":"Age","rangeAxis":""},{"valueAxis":"Vulnerability Score","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Library","Running Version","id"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"19":{"type":"code","title":"","input":"export default async function() {\n  return 'Technologies';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"21":{"type":"markdown","title":"","content":"# "},"22":{"type":"markdown","title":"","content":"# "},"23":{"type":"code","title":"","input":"export default async function() {\n  return 'Libraries';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"24":{"type":"markdown","title":"","content":"# "},"25":{"type":"code","title":"","input":"export default async function() {\n  return 'Operating Systems';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"27":{"type":"data","title":"Operating Systems","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| summarize countDistinct(osVersion)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(osVersion)","valueAxisLabel":"countDistinct(osVersion)","tooltipVariant":"single","categoryAxis":["countDistinct(osVersion)"],"valueAxis":["countDistinct(osVersion)"]}},"singleValue":{"showLabel":false,"label":"countDistinct(osVersion)","prefixIcon":"","recordField":"countDistinct(osVersion)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(osVersion)","rangeAxis":""}],"variant":"single","displayedFields":[]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"29":{"type":"data","title":"Hosts with OneAgent","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| summarize count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]}},"singleValue":{"showLabel":false,"label":"count()","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1728215429229}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"32":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  // Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  const config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($Scope !== 'Tenant') config['managementZone'] = $Scope;\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count non-recent and unsupported running OneAgents\n  let oldOneAgents = 0;\n  let unsupportedOneAgents = 0;\n  for(let nonRecentOneAgent of nonRecentOneAgents) {\n    if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n      unsupportedOneAgents++;\n    } else {\n      oldOneAgents++;\n    }\n  }\n  // Multiply by the sampling factor to get more realistic stats\n  oldOneAgents = oldOneAgents * 100 / objects.percentageOfEnvironmentSearched;\n  unsupportedOneAgents = parseInt(unsupportedOneAgents * 100 / objects.percentageOfEnvironmentSearched);\n  const score = (unsupportedOneAgents > 0) ? 0 : ((oldOneAgents > 0) ? 0.5 : 1);\n  let result = {};\n  switch(true) {\n    case score === 1:\n      result = `✅ ${unsupportedOneAgents}`;\n      break;\n    case score === 0.5:\n      result = `💡 ${unsupportedOneAgents}`;\n      break;\n    case score === 0:\n      result = `⚠️ ${unsupportedOneAgents}`;\n      break;\n  }\n  return result;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"33":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  // Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running recent OneAgent versions\n  const config = {\n    agentVersionIs: \"GREATER_EQUAL\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($Scope !== 'Tenant') config['managementZone'] = $Scope;\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let recentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count recent running OneAgents\n  recentOneAgents = recentOneAgents.length * 100 / objects.percentageOfEnvironmentSearched;\n  return recentOneAgents;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Recent OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952194742}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"34":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  // Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  const config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($Scope !== 'Tenant') config['managementZone'] = $Scope;\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count non-recent and unsupported running OneAgents\n  let oldOneAgents = 0;\n  let unsupportedOneAgents = 0;\n  for(let nonRecentOneAgent of nonRecentOneAgents) {\n    if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n      unsupportedOneAgents++;\n    } else {\n      oldOneAgents++;\n    }\n  }\n  // Multiply by the sampling factor to get more realistic stats\n  return oldOneAgents * 100 / objects.percentageOfEnvironmentSearched;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Old but supported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952206500}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"35":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1]}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest OneAgent version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"36":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1] - 20}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported OneAgent","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"37":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Scope === \"Tenant\") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let unsupportedActiveGateCount = 0;\n    // Count unsupported ActiveGates\n    for(let activeGate of objects.activeGates) {\n      if(activeGate.version.substring(2, 5) < oldestSupportedVersion) unsupportedActiveGateCount++;\n    }\n    // Compute local score based on above number\n    const score = objects.activeGates.findIndex(el => el.version.substring(2, 5) < oldestSupportedVersion) > -1 ? 0 : (objects.activeGates.findIndex(el => el.version.substring(2, 5) < (latestSupportedVersion - 6)) > -1 ? 0.5 : 1);\n    let result = {};\n    switch(true) {\n      case score === 1:\n        result = `✅ ${unsupportedActiveGateCount}`;\n        break;\n      case score === 0.5:\n        result = `💡 ${unsupportedActiveGateCount}`;\n        break;\n      case score === 0:\n        result = `⚠️ ${unsupportedActiveGateCount}`;\n        break;\n    }\n   // Return the emojied result\n   return result;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"39":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Scope === \"Tenant\") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let recentActiveGateCount = 0;\n    // Count ActiveGates running with a recent version\n    for(let activeGate of objects.activeGates) {\n      if((activeGate.version.substring(2, 5) >= (latestSupportedVersion - 6))) recentActiveGateCount++;\n    }\n    return recentActiveGateCount;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Recent ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952236490}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"40":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Scope === \"Tenant\") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let oldButSupportedActiveGateCount = 0;\n    // Count ActiveGates running with a version that is old but still supported\n    for(let activeGate of objects.activeGates) {\n      if((activeGate.version.substring(2, 5) >= oldestSupportedVersion) && (activeGate.version.substring(2, 5) < (latestSupportedVersion - 6))) oldButSupportedActiveGateCount++;\n    }\n    return oldButSupportedActiveGateCount;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Old but supported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952243243}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"41":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1]}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest ActiveGate version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"42":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1] - 20}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported ActiveGate","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"43":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($Scope === \"Tenant\") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    objects = await activeGatesClient.getAllActiveGates();\n    const activeGates = objects.activeGates.map(el => {\n      const filteredEntry = {};\n      switch(true) {\n      case parseInt(el.version.substring(2,5)) < oldestSupportedVersion:\n        filteredEntry.Version = `⚠️ ${el.version}`;\n        break;\n      case parseInt(el.version.substring(2,5)) < (latestSupportedVersion - 6):\n        filteredEntry.Version = `💡 ${el.version}`;\n        break;\n      default:\n        filteredEntry.Version = `✅ ${el.version}`;\n      }\n      filteredEntry.ActiveGate = el.hostname;\n      return filteredEntry;\n    });\n  \n    return activeGates.sort(function (a, b) {\n      if (a.Version.substr(4, 3) > b.Version.substr(4, 3)) {\n        return 1;\n      }\n      if (a.Version.substr(4, 3) < b.Version.substr(4, 3)) {\n        return -1;\n      }\n      return 0;\n    });\n  } else {\n    return {\n      \"ActiveGate\": `N/A`\n    };\n  }\n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["Version","ActiveGate"],"categoryAxisLabel":"Version,ActiveGate","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"oldest supported OneAgent","autoscale":false,"recordField":"Version","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"rowDensity":"condensed","columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"Version"},"legend":"auto","displayedFields":["Version","ActiveGate"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["ActiveGate"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"44":{"type":"markdown","title":"","content":"# "},"45":{"type":"code","title":"","input":"export default async function() {\n  return 'Dynatrace';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"48":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function () {\n  /// Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  let config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($Scope !== 'Tenant') config['managementZone'] = $Scope;\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Sort OneAgents by their version (ascending)\n  nonRecentOneAgents = nonRecentOneAgents.sort(function (a, b) {\n    if (a.hostInfo.agentVersion.minor > b.hostInfo.agentVersion.minor) {\n      return 1;\n    }\n    if (a.hostInfo.agentVersion.minor < b.hostInfo.agentVersion.minor) {\n      return -1;\n    }\n    return 0;\n  });\n  // Format final output\n  nonRecentOneAgents = nonRecentOneAgents.map((e) => {\n      const oneAgentVersion = '1.' + e.hostInfo.agentVersion.minor;\n      const result = {\n        \"OneAgent version\": (e.hostInfo.agentVersion.minor < oldestSupportedVersion ? `⚠️ ${oneAgentVersion}` : `💡 ${oneAgentVersion}`),\n        Host: e.hostInfo.displayName,\n        entityId: e.hostInfo.entityId\n      }\n      return result;\n  });\n  // List hosts that are running recent OneAgent versions\n  config = {\n    agentVersionIs: \"GREATER_EQUAL\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($Scope !== 'Tenant') config['managementZone'] = $Scope;\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let recentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Sort OneAgents by their version (ascending)\n  recentOneAgents = recentOneAgents.sort(function (a, b) {\n    if (a.hostInfo.agentVersion.minor > b.hostInfo.agentVersion.minor) {\n      return 1;\n    }\n    if (a.hostInfo.agentVersion.minor < b.hostInfo.agentVersion.minor) {\n      return -1;\n    }\n    return 0;\n  });\n  // Format final output\n  recentOneAgents = recentOneAgents.map((e) => {\n      const oneAgentVersion = '1.' + e.hostInfo.agentVersion.minor;\n      const result = {\n        \"OneAgent version\": `✅ ${oneAgentVersion}`,\n        Host: e.hostInfo.displayName,\n        entityId: e.hostInfo.entityId\n      }\n      return result;\n  });\n  // Concatenate up to 500 non-recent OneAgents with up to 500 recent OneAgents\n  const allOneAgents = [...nonRecentOneAgents, ...recentOneAgents];\n  if(allOneAgents.length > 0) {\n    return allOneAgents;\n  } else {\n    return { \"No OneAgent found\": \"N/A\"};\n  }  \n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute","groupingThresholdValue":0,"valueType":"relative"},"categoricalBarChartSettings":{"categoryAxis":["OneAgent version","Host","entityId"],"categoryAxisLabel":"OneAgent version,Host,entityId","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"OneAgent version","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"OneAgent version","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"columnWidths":{},"lineWrapIds":[["Host"]],"enableLineWrap":true,"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"OneAgent version"},"legend":"auto","displayedFields":["OneAgent version","Host","entityId"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["OneAgent version","Host","entityId"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"49":{"type":"markdown","title":"","content":"# "},"51":{"type":"data","title":"Instances of Obsolete Technologies","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsRename Process = entity.name\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter toTimestamp(event.eol) < now()\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟠\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"ApplicationObservabilitySignetIcon","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","isIconVisible":false,"trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"52":{"type":"data","title":"Instances of Up-To-Date Technologies","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsRename Process = entity.name\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter event.currentVersion == event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\"\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"53":{"type":"data","title":"Instances of Updatable Technologies","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsRename Process = entity.name\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isFalseOrNull(toTimestamp(event.eol) < now()) AND event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"54":{"type":"data","title":"Hosts with Obsolete OS","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd osVersion\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter toTimestamp(event.eol) < now()\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟠\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"55":{"type":"data","title":"Hosts with Updatable OS","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd osVersion\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter (isNull(event.eol) OR toTimestamp(event.eol) > now()) AND event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion)\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"56":{"type":"data","title":"Instances of Technologies with Undocumented Version","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsRename Process = entity.name\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNull(event.currentVersion) OR event.currentVersion == \"null\" OR isNull(event.latestVersion)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"57":{"type":"data","title":"Hosts with Up-To-Date OS","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd osVersion\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter event.currentVersion == event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\"\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"58":{"type":"data","title":"Hosts with Undocumented OS","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd osVersion\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNull(event.currentVersion) OR isNull(event.latestVersion)\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"60":{"type":"data","title":"Instances of Up-To-Date Libraries","query":"fetch dt.entity.software_component, from: -15m\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["sum"],"valueAxis":[],"categoryAxisLabel":"sum","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"61":{"type":"data","title":"Instances of Updatable Libraries","query":"fetch dt.entity.software_component, from: -15m\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion != event.latestStableVersion\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["sum"],"valueAxis":[],"categoryAxisLabel":"sum","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"62":{"type":"data","title":"Instances of Libraries with Undocumented Version","query":"fetch dt.entity.software_component, from: -15m\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNull(event.currentVersion) OR isNull(event.latestStableVersion)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["sum"],"valueAxis":[],"categoryAxisLabel":"sum","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"65":{"type":"data","title":"Technology Distribution","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsRename Process = entity.name\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize by:{Status, Technology, Edition, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Edition, Version\n| sort `Process Count` DESC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["Status","Technology","Edition","Version"],"categoryAxisLabel":"Status,Technology,Edition,Version","valueAxis":["Process Count"],"valueAxisLabel":"Process Count","tooltipVariant":"single"}},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Process Count"},"displayedFields":["Status","Technology","Edition","Version"]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""}],"variant":"single","displayedFields":["Technology","Edition","Version","Status"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"66":{"type":"data","title":"Library Version Distribution","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize by:{Status, Technology, Library, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Library, Version\n| sort `Process Count` DESC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["Status","Technology","Library","Version"],"valueAxis":["Process Count"],"categoryAxisLabel":"Status,Technology,Library,Version","valueAxisLabel":"Process Count","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"Library","prefixIcon":"","recordField":"Library","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":540.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"ascending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Process Count"},"displayedFields":["Status","Technology","Library","Version"]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Library","Version"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"67":{"type":"data","title":"Instances of Vulnerable Libraries","query":"fetch dt.entity.software_component, from: -15m\n| expand processId = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| filter isNotNull(`Top Vulnerability`)\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones\n    ],\n    sourceField:processId,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pg.\"\n| filter in($Scope, pg.managementZones) OR $Scope == \"Tenant\"\n| summarize count = count()\n| fields sum = concat(count, \"🔴\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["sum"],"valueAxis":[],"categoryAxisLabel":"sum","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]},"autoSelectVisualization":false},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"68":{"type":"markdown","title":"","content":"##### Version: 1.0.0\n###### Author: Thomas Contassot\n###### Links:\n- [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management)\n- [Request For Enhancement](https://dt-url.net/som-rfe)\n###### Credits:\n- [endoflife.date](https://endoflife.date) (for OS and Technology obsolescence data)\n- [deps.dev](https://deps.dev) (for Library obsolescence data)\n- [Dynatrace AppSec](https://docs.dynatrace.com/docs/secure/application-security/vulnerability-analytics/vulnerabilities) (for Vulnerability insights)"},"69":{"type":"markdown","title":"","content":"##### Instructions\n###### Installation:\n1. Download from [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management) and [upload](https://docs.dynatrace.com/docs/analyze-explore-automate/dashboards-and-notebooks/dashboards-new/get-started/dashboards-use#dashboards-upload) the Dashboard's JSON to visualize the results of the continuous analysis (you've probably already done that)\n2. Download from [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management) and [upload](https://docs.dynatrace.com/docs/analyze-explore-automate/workflows/manage-workflows/workflows-upload) the workflow template's YAML to keep refreshing obsolescence data\n3. The workflow runs by default every 2mn from 4 to 10AM, each day. To optimize the cost of the solution, you can reduce its frequency. Simply make sure it fully runs at least once a week to guarantee maximum coverage of your software inventory.\n4. [Allow outbound connections](https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections) to 'endoflife.date' and 'api.deps.dev' domains in the tenant's settings\n5. The dashboard will show exhaustive results at the end of the first full data refresh cycle (cf. step 2). Wait up to 24h to ensure the completeness of the obsolescence analysis.\n###### Usage:\n- Filter the dashboard by Management Zone by defining the 'Scope' variable\n- Prioritize your maintenance by vulnerability and obsolescence risk, criticity and radius of the affected software components\n- Share the filtered view's URL to the responsible team so that they keep their software safe and supported\n- Extend your OneAgent coverage to reduce obsolescence risks and much more\n###### Update:\n1. Download the new JSON files whenever a new version is published in the open source GitHub repo\n2. Follow the installation instructions from the latest version\n3. Remove the previous version of the Dashboard and Workflow from your tenant"},"71":{"type":"data","title":"Hosts missing OneAgent","query":"// VMWare\n//from classic integration\nfetch dt.entity.virtualmachine, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n| fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n//match with OneAgent hosts\n| lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n| fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n| lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n| fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n  ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n  tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n//add extension VMs\n| append [ fetch `dt.entity.vmware:virtualmachine`\n  | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n  | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n//add OneAgent VMware hosts\n| append [ fetch dt.entity.host\n  | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n  | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n  | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n| dedup id\n| filter matchesValue(monitoringStatus, \"CLOUD\")\n| fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n| filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]\n| summarize count = count()\n| fields sum = concat(count, \"⚠️\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["sum"],"categoryAxisLabel":"sum","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"sum","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["sum"]}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"72":{"type":"data","title":"OS Distribution","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd osVersion\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| fieldsAdd Link = event.link\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| fields Status, Host = entity.name, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link, id\n| sort Status ASC\n| append [ // VMWare\n  //from classic integration\n  fetch dt.entity.virtualmachine, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n  //match with OneAgent hosts\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  //add extension VMs\n  | append [ fetch `dt.entity.vmware:virtualmachine`\n    | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n    | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n    | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n    | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n      ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n  //add OneAgent VMware hosts\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n    | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | dedup id\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n]\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]\n| summarize by:{Status, `Full Name`}, count = count()\n| fields Status, Count = count, `Full Name`\n| sort Count DESC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Status","Full Name"],"valueAxis":["Count"],"categoryAxisLabel":"Status,Full Name","valueAxisLabel":"Count","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Status","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":171.9479217529297,"[\"Status\"]":154.61459350585938},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Status","Full Name"],"dataMappings":{"value":"Count"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"Count","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["Status","Full Name"]},"autoSelectVisualization":false},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"73":{"type":"data","title":"All Hosts","query":"fetch dt.entity.host, from: -15m\n| filter isNotNull(osVersion)\n| fieldsAdd osVersion\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| fieldsAdd Link = event.link\n| fieldsAdd host = lookup([\n      fetch dt.entity.host\n      | fieldsAdd managementZones\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten host, prefix:\"host.\"\n| filter in($Scope, host.managementZones) OR $Scope == \"Tenant\"\n| fields Status, Host = entity.name, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link, id\n| sort Status ASC\n| append [ // VMWare\n  //from classic integration\n  fetch dt.entity.virtualmachine, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n  //match with OneAgent hosts\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  //add extension VMs\n  | append [ fetch `dt.entity.vmware:virtualmachine`\n    | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n    | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n    | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n    | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n      ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n  //add OneAgent VMware hosts\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n    | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | dedup id\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n]\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter $Scope == \"Tenant\" AND $IncludeMonitoringCandidates == \"YES\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Status","Host","Full Name","Cycle Published At","Published at","id","OS","Running Version","LTS","Cycle","End of Life","Latest Version","Link"],"valueAxis":["Max Age"],"categoryAxisLabel":"Status,Host,Full Name,Cycle Published At,Published at,id,OS,Running Version,LTS,Cycle,End of Life,Latest Version,Link","valueAxisLabel":"Max Age","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Status","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":171.9479217529297,"[\"Status\"]":154.61459350585938},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Status","Host","Full Name","Cycle Published At","Published at","id","OS","Running Version","LTS","Cycle","End of Life","Latest Version","Link"],"dataMappings":{"value":"Max Age"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"Max Age","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["Status","Host","Full Name","Cycle Published At","Published at","id","OS","Running Version","LTS","Cycle","End of Life","Latest Version","Link"]},"autoSelectVisualization":false},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"segments":{"tileSegmentsEnabled":true,"tileSegments":[]},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}}},"layouts":{"0":{"x":0,"y":0,"w":12,"h":2},"1":{"x":12,"y":0,"w":12,"h":2},"7":{"x":0,"y":24,"w":3,"h":4},"8":{"x":0,"y":28,"w":3,"h":4},"13":{"x":0,"y":42,"w":3,"h":4},"14":{"x":0,"y":46,"w":3,"h":4},"17":{"x":0,"y":32,"w":24,"h":8},"18":{"x":0,"y":50,"w":24,"h":8},"19":{"x":0,"y":23,"w":24,"h":1},"21":{"x":0,"y":22,"w":24,"h":1},"22":{"x":0,"y":40,"w":24,"h":1},"23":{"x":0,"y":41,"w":24,"h":1},"24":{"x":0,"y":2,"w":24,"h":1},"25":{"x":0,"y":3,"w":24,"h":1},"27":{"x":0,"y":4,"w":3,"h":5},"29":{"x":0,"y":9,"w":3,"h":5},"32":{"x":0,"y":60,"w":6,"h":2},"33":{"x":0,"y":62,"w":3,"h":2},"34":{"x":3,"y":62,"w":3,"h":2},"35":{"x":0,"y":64,"w":3,"h":2},"36":{"x":3,"y":64,"w":3,"h":2},"37":{"x":12,"y":60,"w":6,"h":2},"39":{"x":12,"y":62,"w":3,"h":2},"40":{"x":15,"y":62,"w":3,"h":2},"41":{"x":12,"y":64,"w":3,"h":2},"42":{"x":15,"y":64,"w":3,"h":2},"43":{"x":18,"y":60,"w":6,"h":6},"44":{"x":0,"y":58,"w":24,"h":1},"45":{"x":0,"y":59,"w":24,"h":1},"48":{"x":6,"y":60,"w":6,"h":6},"49":{"x":0,"y":66,"w":24,"h":1},"51":{"x":3,"y":24,"w":6,"h":2},"52":{"x":3,"y":28,"w":6,"h":2},"53":{"x":3,"y":26,"w":6,"h":2},"54":{"x":3,"y":4,"w":6,"h":2},"55":{"x":3,"y":6,"w":6,"h":2},"56":{"x":3,"y":30,"w":6,"h":2},"57":{"x":3,"y":8,"w":6,"h":2},"58":{"x":3,"y":10,"w":6,"h":2},"60":{"x":3,"y":46,"w":6,"h":2},"61":{"x":3,"y":44,"w":6,"h":2},"62":{"x":3,"y":48,"w":6,"h":2},"65":{"x":9,"y":24,"w":15,"h":8},"66":{"x":9,"y":42,"w":15,"h":8},"67":{"x":3,"y":42,"w":6,"h":2},"68":{"x":0,"y":67,"w":12,"h":10},"69":{"x":12,"y":67,"w":12,"h":10},"71":{"x":3,"y":12,"w":6,"h":2},"72":{"x":9,"y":4,"w":15,"h":10},"73":{"x":0,"y":14,"w":24,"h":8}},"importedWithCode":true,"settings":{"defaultTimeframe":{"value":{"from":"now()-5m","to":"now()"},"enabled":true}}}

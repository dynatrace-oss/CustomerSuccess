{"version":17,"variables":[{"key":"Status","type":"csv","visible":true,"input":"🟢 Up-to-date,🟡 Updatable,🟠 Obsolete,🔴 Vulnerable,⚪ Undocumented,⚠️ Missing OneAgent","multiple":true,"defaultValue":["🟢 Up-to-date","🟡 Updatable","🟠 Obsolete","🔴 Vulnerable","⚠️ Missing OneAgent"]},{"key":"MZ","type":"code","visible":true,"input":"import { settingsObjectsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  const config = { schemaIds: 'builtin:management-zones'};\n  const objects = await settingsObjectsClient.getSettingsObjects(config);\n  let managementZones = objects.items.map(el => el.value.name);\n  managementZones = [\" \", ...managementZones];\n  return managementZones;\n}","multiple":false,"defaultValue":" "},{"key":"Tag","type":"code","visible":true,"input":"import { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nexport default async function() {\n  const objects = await queryExecutionClient.queryExecute({\n    body: {\n      query: 'fetch dt.entity.host, from: -15m | filter isNotNull(osVersion) | fieldsAdd tags | expand tags | filter isNotNull(tags) | summarize by:{tags}, count() | fields tags',\n      requestTimeoutMilliseconds: 10000,\n      maxResultRecords: 100000\n    },\n  });\n  return [' ', ...objects.result.records.map(e => e.tags)];\n}"}],"tiles":{"0":{"type":"code","title":"","input":"export default async function() {\n  return 'Software Obsolescence Management';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"1":{"type":"markdown","title":"","content":"#\n#### 💿 Stay Ahead Of Your Software Portfolio 💿\n\n "},"7":{"type":"data","title":"Technologies","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC, Technology ASC\n| filter isNotNull(Technology)\n| summarize countDistinct(Technology)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(Technology)","valueAxisLabel":"countDistinct(Technology)","tooltipVariant":"single","categoryAxis":["countDistinct(Technology)"],"valueAxis":["countDistinct(Technology)"]}},"singleValue":{"showLabel":false,"label":"Technology Count","prefixIcon":"","recordField":"countDistinct(Technology)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(Technology)","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"Technology Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"Technology Count","dimension":"Technology Count","displayedFields":["Technology Count"],"longitude":"Technology Count"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"countDistinct(Technology)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152485154}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"8":{"type":"data","title":"Processes","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC, Technology ASC\n| summarize countDistinct(id)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(id)","valueAxisLabel":"countDistinct(id)","tooltipVariant":"single","categoryAxis":["countDistinct(id)"],"valueAxis":["countDistinct(id)"]}},"singleValue":{"showLabel":false,"label":"Process Count","prefixIcon":"","recordField":"countDistinct(id)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(id)","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"countDistinct(id)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1728215429229}],"dataMapping":{"value":"Process Count","dimension":"Process Count","displayedFields":["Process Count"],"longitude":"Process Count"},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"13":{"type":"data","title":"Libraries","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize countDistinct(Library)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(Library)","valueAxisLabel":"countDistinct(Library)","tooltipVariant":"single","categoryAxis":["countDistinct(Library)"],"valueAxis":["countDistinct(Library)"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryCount","prefixIcon":"","recordField":"countDistinct(Library)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"Library\"]":513.3958435058594},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(Library)","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"libraryCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"libraryCount","dimension":"libraryCount","displayedFields":["libraryCount"],"longitude":"libraryCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false,"unitsOverrides":[{"identifier":"countDistinct(Library)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152521161}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"14":{"type":"data","title":"Library Versions","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize by:{Status, Technology, Library, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Library, Version\n| summarize count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"libraryVersionCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"libraryVersionCount","dimension":"libraryVersionCount","displayedFields":["libraryVersionCount"],"longitude":"libraryVersionCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152527296}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"17":{"type":"data","title":"Technology Instances","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC, Technology ASC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["Status","Process","Technology","Edition","Running Version","Cycle Published At","Published at","id","Latest Version","Link","LTS","Cycle","End of Life"],"categoryAxisLabel":"Status,Process,Technology,Edition,Running Version,Cycle Published At,Published at,id,Latest Version,Link,LTS,Cycle,End of Life","valueAxis":["Max Age"],"valueAxisLabel":"Max Age","tooltipVariant":"single"}},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":246,"[\"Status\"]":135.03125,"[\"Technology\"]":189.73959350585938,"[\"Management Zones\"]":259.625,"[\"Tags\"]":159},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Status\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Max Age"},"displayedFields":["Status","Process","Technology","Edition","Running Version","Cycle Published At","Published at","id","Latest Version","Link","LTS","Cycle","End of Life"]},"histogram":{"dataMappings":[{"valueAxis":"Max Age","rangeAxis":""}],"variant":"single","displayedFields":["Status","Process","Technology","Edition","Running Version","Cycle Published At","Latest Version","Published at","id","Link","LTS","Cycle","End of Life"]},"label":{"showLabel":false,"label":"Max Age"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"Max Age","displayedFields":["Status","Process","Technology","Edition","Running Version","id","Latest Version","Published at","Link","LTS","Cycle","Cycle Published At","End of Life","Max Age"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"18":{"type":"data","title":"Library Instances","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| fields Status, Technology, Library, `Running Version` = Version, `Published At` = substring(event.currentVersionPublishedAt, to:10), `Latest Stable Version` = event.latestStableVersion, `Published at` = substring(event.latestStableVersionPublishedAt, to:10), Age = age, `Top Vulnerability`, `Vulnerability Score`, Licenses = event.licenses, Link = event.link, id\n| sort Status DESC, `Vulnerability Score` DESC, Technology ASC, Library ASC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"Status,Technology,Library,Running Version,Published At,Latest Stable Version,Published at,Licenses,id,Link","valueAxisLabel":"Age","tooltipVariant":"single","categoryAxis":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Licenses","id","Link"],"valueAxis":["Age"]},"truncationMode":"middle","hiddenLegendFields":["entity"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"Library","prefixIcon":"","recordField":"Library","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125,"[\"Status\"]":160.1354217529297},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Age"},"displayedFields":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Licenses","id","Link"]},"histogram":{"dataMappings":[{"valueAxis":"Age","rangeAxis":""},{"valueAxis":"Vulnerability Score","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Library","Running Version","Published At","Published at","id"]},"label":{"showLabel":false,"label":"Vulnerability Score"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"Vulnerability Score","dimension":"Status","displayedFields":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Age","Licenses","id","Link"],"longitude":"Age","latitude":"Vulnerability Score"},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"19":{"type":"code","title":"","input":"export default async function() {\n  return 'Technologies';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"21":{"type":"markdown","title":"","content":"# "},"22":{"type":"markdown","title":"","content":"# "},"23":{"type":"code","title":"","input":"export default async function() {\n  return 'Libraries';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"24":{"type":"markdown","title":"","content":"# "},"25":{"type":"code","title":"","input":"export default async function() {\n  return 'Operating Systems';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"32":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  // Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  const config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== ' ') config['managementZone'] = $MZ;\n  if($Tag !== ' ') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count non-recent and unsupported running OneAgents\n  let oldOneAgents = 0;\n  let unsupportedOneAgents = 0;\n  for(let nonRecentOneAgent of nonRecentOneAgents) {\n    if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n      unsupportedOneAgents++;\n    } else {\n      oldOneAgents++;\n    }\n  }\n  // Multiply by the sampling factor to get more realistic stats\n  oldOneAgents = oldOneAgents * 100 / objects.percentageOfEnvironmentSearched;\n  unsupportedOneAgents = parseInt(unsupportedOneAgents * 100 / objects.percentageOfEnvironmentSearched);\n  const score = (unsupportedOneAgents > 0) ? 0 : ((oldOneAgents > 0) ? 0.5 : 1);\n  let result = {};\n  switch(true) {\n    case score === 1:\n      result = `✅ ${unsupportedOneAgents}`;\n      break;\n    case score === 0.5:\n      result = `💡 ${unsupportedOneAgents}`;\n      break;\n    case score === 0:\n      result = `⚠️ ${unsupportedOneAgents}`;\n      break;\n  }\n  return result;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"33":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  // Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running recent OneAgent versions\n  const config = {\n    agentVersionIs: \"GREATER_EQUAL\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== ' ') config['managementZone'] = $MZ;\n  if($Tag !== ' ') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let recentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count recent running OneAgents\n  recentOneAgents = recentOneAgents.length * 100 / objects.percentageOfEnvironmentSearched;\n  return recentOneAgents;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Recent OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952194742}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"34":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  // Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  const config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== ' ') config['managementZone'] = $MZ;\n  if($Tag !== ' ') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count non-recent and unsupported running OneAgents\n  let oldOneAgents = 0;\n  let unsupportedOneAgents = 0;\n  for(let nonRecentOneAgent of nonRecentOneAgents) {\n    if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n      unsupportedOneAgents++;\n    } else {\n      oldOneAgents++;\n    }\n  }\n  // Multiply by the sampling factor to get more realistic stats\n  return oldOneAgents * 100 / objects.percentageOfEnvironmentSearched;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Old but supported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952206500}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"35":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1]}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest OneAgent version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"36":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1] - 20}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported OneAgent","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"37":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \" \" && $Tag === \" \") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let unsupportedActiveGateCount = 0;\n    // Count unsupported ActiveGates\n    for(let activeGate of objects.activeGates) {\n      if(activeGate.version.substring(2, 5) < oldestSupportedVersion) unsupportedActiveGateCount++;\n    }\n    // Compute local score based on above number\n    const score = objects.activeGates.findIndex(el => el.version.substring(2, 5) < oldestSupportedVersion) > -1 ? 0 : (objects.activeGates.findIndex(el => el.version.substring(2, 5) < (latestSupportedVersion - 6)) > -1 ? 0.5 : 1);\n    let result = {};\n    switch(true) {\n      case score === 1:\n        result = `✅ ${unsupportedActiveGateCount}`;\n        break;\n      case score === 0.5:\n        result = `💡 ${unsupportedActiveGateCount}`;\n        break;\n      case score === 0:\n        result = `⚠️ ${unsupportedActiveGateCount}`;\n        break;\n    }\n   // Return the emojied result\n   return result;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"39":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \" \" && $Tag === \" \") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let recentActiveGateCount = 0;\n    // Count ActiveGates running with a recent version\n    for(let activeGate of objects.activeGates) {\n      if((activeGate.version.substring(2, 5) >= (latestSupportedVersion - 6))) recentActiveGateCount++;\n    }\n    return recentActiveGateCount;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Recent ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952236490}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"40":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \" \" && $Tag === \" \") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let oldButSupportedActiveGateCount = 0;\n    // Count ActiveGates running with a version that is old but still supported\n    for(let activeGate of objects.activeGates) {\n      if((activeGate.version.substring(2, 5) >= oldestSupportedVersion) && (activeGate.version.substring(2, 5) < (latestSupportedVersion - 6))) oldButSupportedActiveGateCount++;\n    }\n    return oldButSupportedActiveGateCount;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Old but supported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952243243}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"41":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1]}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest ActiveGate version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"42":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  const objects = await clusterVersionClient.getVersion();\n  return `1.${objects.version.split('.')[1] - 20}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported ActiveGate","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"legend":"auto","displayedFields":["element"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"43":{"type":"code","title":"","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \" \" && $Tag === \" \") {\n    // Determine the latest OneAgent version supported by Dynatrace.\n    let objects = await clusterVersionClient.getVersion();\n    const latestSupportedVersion = objects.version.split('.')[1];\n    const oldestSupportedVersion = objects.version.split('.')[1] - 20;\n    objects = await activeGatesClient.getAllActiveGates();\n    const activeGates = objects.activeGates.map(el => {\n      const filteredEntry = {};\n      switch(true) {\n      case parseInt(el.version.substring(2,5)) < oldestSupportedVersion:\n        filteredEntry.Version = `⚠️ ${el.version}`;\n        break;\n      case parseInt(el.version.substring(2,5)) < (latestSupportedVersion - 6):\n        filteredEntry.Version = `💡 ${el.version}`;\n        break;\n      default:\n        filteredEntry.Version = `✅ ${el.version}`;\n      }\n      filteredEntry.ActiveGate = el.hostname;\n      return filteredEntry;\n    });\n  \n    return activeGates.sort(function (a, b) {\n      if (a.Version.substr(4, 3) > b.Version.substr(4, 3)) {\n        return 1;\n      }\n      if (a.Version.substr(4, 3) < b.Version.substr(4, 3)) {\n        return -1;\n      }\n      return 0;\n    });\n  } else {\n    return {\n      \"ActiveGate\": `N/A`\n    };\n  }\n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["Version","ActiveGate"],"categoryAxisLabel":"Version,ActiveGate","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"oldest supported OneAgent","autoscale":false,"recordField":"Version","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"rowDensity":"condensed","columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"Version"},"legend":"auto","displayedFields":["Version","ActiveGate"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["ActiveGate"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"Version","displayedFields":["Version","ActiveGate"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"44":{"type":"markdown","title":"","content":"# "},"45":{"type":"code","title":"","input":"export default async function() {\n  return 'Dynatrace';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"48":{"type":"code","title":"","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function () {\n  /// Determine the latest OneAgent version supported by Dynatrace.\n  let objects = await clusterVersionClient.getVersion();\n  const latestSupportedVersion = objects.version.split('.')[1];\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  let config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== ' ') config['managementZone'] = $MZ;\n  if($Tag !== ' ') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Sort OneAgents by their version (ascending)\n  nonRecentOneAgents = nonRecentOneAgents.sort(function (a, b) {\n    if (a.hostInfo.agentVersion.minor > b.hostInfo.agentVersion.minor) {\n      return 1;\n    }\n    if (a.hostInfo.agentVersion.minor < b.hostInfo.agentVersion.minor) {\n      return -1;\n    }\n    return 0;\n  });\n  // Format final output\n  nonRecentOneAgents = nonRecentOneAgents.map((e) => {\n      const oneAgentVersion = '1.' + e.hostInfo.agentVersion.minor;\n      const result = {\n        \"OneAgent version\": (e.hostInfo.agentVersion.minor < oldestSupportedVersion ? `⚠️ ${oneAgentVersion}` : `💡 ${oneAgentVersion}`),\n        Host: e.hostInfo.displayName,\n        entityId: e.hostInfo.entityId\n      }\n      return result;\n  });\n  // List hosts that are running recent OneAgent versions\n  config = {\n    agentVersionIs: \"GREATER_EQUAL\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== ' ') config['managementZone'] = $MZ;\n  if($Tag !== ' ') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let recentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Sort OneAgents by their version (ascending)\n  recentOneAgents = recentOneAgents.sort(function (a, b) {\n    if (a.hostInfo.agentVersion.minor > b.hostInfo.agentVersion.minor) {\n      return 1;\n    }\n    if (a.hostInfo.agentVersion.minor < b.hostInfo.agentVersion.minor) {\n      return -1;\n    }\n    return 0;\n  });\n  // Format final output\n  recentOneAgents = recentOneAgents.map((e) => {\n      const oneAgentVersion = '1.' + e.hostInfo.agentVersion.minor;\n      const result = {\n        \"OneAgent version\": `✅ ${oneAgentVersion}`,\n        Host: e.hostInfo.displayName,\n        entityId: e.hostInfo.entityId\n      }\n      return result;\n  });\n  // Concatenate up to 500 non-recent OneAgents with up to 500 recent OneAgents\n  const allOneAgents = [...nonRecentOneAgents, ...recentOneAgents];\n  if(allOneAgents.length > 0) {\n    return allOneAgents;\n  } else {\n    return { \"No OneAgent found\": \"N/A\"};\n  }  \n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute","groupingThresholdValue":0,"valueType":"relative"},"categoricalBarChartSettings":{"categoryAxis":["OneAgent version","Host","entityId"],"categoryAxisLabel":"OneAgent version,Host,entityId","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"OneAgent version","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"OneAgent version","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"columnWidths":{},"lineWrapIds":[["Host"]],"enableLineWrap":true,"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"OneAgent version"},"legend":"auto","displayedFields":["OneAgent version","Host","entityId"],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["OneAgent version","Host","entityId"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"OneAgent version","displayedFields":["OneAgent version","Host","entityId"]},"tooltip":{}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"49":{"type":"markdown","title":"","content":"# "},"51":{"type":"data","title":"Obsolete Technology Instances","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter toTimestamp(event.eol) < now()\n| summarize count = count()\n| fields concat(count, \"🟠\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟠\")"],"categoryAxisLabel":"concat(count, \"🟠\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"ApplicationObservabilitySignetIcon","recordField":"concat(count, \"🟠\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","isIconVisible":false,"trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟠\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"52":{"type":"data","title":"Up-To-Date Technology Instances","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"🟢 Up-to-date\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter event.currentVersion == event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\"\n| summarize count = count()\n| fields concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"53":{"type":"data","title":"Updatable Technology Instances","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"🟡 Updatable\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isFalseOrNull(toTimestamp(event.eol) < now()) AND event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion)\n| summarize count = count()\n| fields concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"54":{"type":"data","title":"Hosts with Obsolete OS Version","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter toTimestamp(event.eol) < now()\n| summarize count = count()\n| fields concat(count, \"🟠\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟠\")"],"categoryAxisLabel":"concat(count, \"🟠\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟠\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟠\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"55":{"type":"data","title":"Hosts with Updatable OS Version","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND in(\"🟡 Updatable\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter (isNull(event.eol) OR toTimestamp(event.eol) > now()) AND event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion)\n| summarize count = count()\n| fields concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"56":{"type":"data","title":"Undocumented Technology Instances","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"⚪ Undocumented\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNull(event.currentVersion) OR event.currentVersion == \"null\" OR isNull(event.latestVersion)\n| summarize count = count()\n| fields concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"57":{"type":"data","title":"Hosts with Up-To-Date OS Version","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND in(\"🟢 Up-to-date\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter event.currentVersion == event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\"\n| summarize count = count()\n| fields concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"58":{"type":"data","title":"Hosts with Undocumented OS Version","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND in(\"⚪ Undocumented\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNull(event.currentVersion) OR isNull(event.latestVersion)\n| summarize count = count()\n| fields concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"65":{"type":"data","title":"Technology Version Distribution","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| summarize by:{Status, Technology, Edition, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Edition, Version\n| sort `Process Count` DESC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["Status","Technology","Edition","Version"],"categoryAxisLabel":"Status,Technology,Edition,Version","valueAxis":["Process Count"],"valueAxisLabel":"Process Count","tooltipVariant":"single"}},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Process Count"},"displayedFields":["Status","Technology","Edition","Version"]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Edition","Version"]},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"Process Count","displayedFields":["Status","Process Count","Technology","Edition","Version"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"66":{"type":"data","title":"Library Version Distribution","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize by:{Status, Technology, Library, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Library, Version\n| sort `Process Count` DESC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["Status","Technology","Library","Version"],"valueAxis":["Process Count"],"categoryAxisLabel":"Status,Technology,Library,Version","valueAxisLabel":"Process Count","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"Library","prefixIcon":"","recordField":"Library","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":540.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"ascending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Process Count"},"displayedFields":["Status","Technology","Library","Version"]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Library","Version"]},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"Process Count","dimension":"Status","displayedFields":["Status","Process Count","Technology","Library","Version"],"longitude":"Process Count"},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"68":{"type":"markdown","title":"","content":"##### Version: 1.1.0\n###### Author: Thomas Contassot\n###### Links:\n- [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management)\n- [Request For Enhancement](https://dt-url.net/som-rfe)\n###### Credits:\n- [endoflife.date](https://endoflife.date) (for OS and Technology obsolescence data)\n- [deps.dev](https://deps.dev) (for Library obsolescence data)\n- [Dynatrace AppSec](https://docs.dynatrace.com/docs/secure/application-security/vulnerability-analytics/vulnerabilities) (for Vulnerability insights)"},"69":{"type":"markdown","title":"","content":"##### Instructions\n###### Installation:\n1. Download from [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management) and [upload](https://docs.dynatrace.com/docs/analyze-explore-automate/dashboards-and-notebooks/dashboards-new/get-started/dashboards-use#dashboards-upload) the Dashboard's JSON to visualize the results of the continuous analysis (you've probably already done that)\n2. Download from [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management) and [upload](https://docs.dynatrace.com/docs/analyze-explore-automate/workflows/manage-workflows/workflows-upload) the workflow template's YAML to keep refreshing obsolescence data\n3. The workflow runs by default every 2mn from 4 to 10AM, each day. To optimize the cost of the solution, you can reduce its frequency. Simply make sure it fully runs at least once a week to guarantee maximum coverage of your software inventory.\n4. [Allow outbound connections](https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections) to 'endoflife.date' and 'api.deps.dev' domains in the tenant's settings\n5. The dashboard will show exhaustive results at the end of the first full data refresh cycle (cf. step 2). Wait up to 24h to ensure the completeness of the obsolescence analysis.\n###### Usage:\n- Scope the audit by Management Zone or Tag by defining the corresponding variable (below the dashboard's title)\n- Filter which obsolescence statuses you need to display to stay focus\n- Prioritize your maintenance by vulnerability and obsolescence risk, criticity and radius of the affected software components\n- Share the filtered view's URL to the responsible team so that they keep their software safe and supported\n- Navigate to the associated entity by clicking any entry in the full-detail tables and then on \"Open record with\"\n- Extend your OneAgent coverage to reduce obsolescence risks. The [Discovery mode](https://www.dynatrace.com/platform/infrastructure-observability/foundation-and-discovery/) + [Code Module injection](https://docs.dynatrace.com/docs/observe/infrastructure-monitoring/hosts/monitoring-modes#code-module-injection) are sufficient for that capability.\n- [Activate AppSec](https://docs.dynatrace.com/docs/secure/application-security/application-protection) to reduce security risks from vulnerabilities. The [Discovery mode](https://www.dynatrace.com/platform/infrastructure-observability/foundation-and-discovery/) + [Code Module injection](https://docs.dynatrace.com/docs/observe/infrastructure-monitoring/hosts/monitoring-modes#code-module-injection) are sufficient for that capability.\n###### Update:\n1. Download the new JSON files whenever a new version is published in the open source GitHub repo\n2. Follow the installation instructions from the latest version\n3. Remove the previous version of the Dashboard and Workflow from your tenant"},"71":{"type":"data","title":"Hosts missing OneAgent","query":"// VMWare\n//from classic integration\nfetch dt.entity.virtualmachine, from: -15m\n| filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n| fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n//match with OneAgent hosts\n| lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n| fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n| lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n| fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n  ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n  tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n//add extension VMs\n| append [ fetch `dt.entity.vmware:virtualmachine`\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n  | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n//add OneAgent VMware hosts\n| append [ fetch dt.entity.host\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n  | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n  | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n| dedup id\n| filter matchesValue(monitoringStatus, \"CLOUD\")\n| fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]\n| summarize count = count()\n| fields concat(count, \"⚠️\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚠️\")"],"categoryAxisLabel":"concat(count, \"⚠️\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚠️\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚠️\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"72":{"type":"data","title":"OS Version Distribution","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC\n| append [ // VMWare\n  //from classic integration\n  fetch dt.entity.virtualmachine, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n  //match with OneAgent hosts\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  //add extension VMs\n  | append [ fetch `dt.entity.vmware:virtualmachine`\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n    | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n    | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n    | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n    | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n      ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n  //add OneAgent VMware hosts\n  | append [ fetch dt.entity.host\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n    | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | dedup id\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n]\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]\n| summarize by:{Status, `Full Name`}, count = count()\n| fields Status, `Host Count` = count, `Full Name`\n| sort `Host Count` DESC","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Status","Full Name"],"valueAxis":["Host Count"],"categoryAxisLabel":"Status,Full Name","valueAxisLabel":"Host Count","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Status","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":171.9479217529297,"[\"Status\"]":154.61459350585938},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Status","Full Name"],"dataMappings":{"value":"Host Count"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"Host Count","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["Status","Full Name"]},"label":{"showLabel":false,"label":"Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false,"dataMapping":{"value":"Count","dimension":"Status","displayedFields":["Status","Count","Full Name"],"longitude":"Count"},"tooltip":{}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"73":{"type":"data","title":"Hosts","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC\n| append [ // VMWare\n  //from classic integration\n  fetch dt.entity.virtualmachine, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n  //match with OneAgent hosts\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  //add extension VMs\n  | append [ fetch `dt.entity.vmware:virtualmachine`\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n    | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n    | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n    | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n    | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n      ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n  //add OneAgent VMware hosts\n  | append [ fetch dt.entity.host\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n    | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | dedup id\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n]\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \" \" AND $Tag == \" \"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Status","Host","Host Group","Full Name","Cycle Published At","Published at","id","OS","Running Version","LTS","Cycle","End of Life","Latest Version","Link"],"valueAxis":["Max Age"],"categoryAxisLabel":"Status,Host,Host Group,Full Name,Cycle Published At,Published at,id,OS,Running Version,LTS,Cycle,End of Life,Latest Version,Link","valueAxisLabel":"Max Age","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Status","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":true,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":145.9479217529297,"[\"Status\"]":149.61459350585938,"[\"managementZones\"]":176.69793701171875,"[\"tags\"]":157,"[\"Host\"]":214.90625,"[\"Full Name\"]":411.01043701171875},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Status\"]","direction":"ascending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Status","Host","Host Group","Full Name","Cycle Published At","Published at","id","OS","Running Version","LTS","Cycle","End of Life","Latest Version","Link"],"dataMappings":{"value":"Max Age"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"Max Age","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["Status","Host","Host Group","Full Name","Cycle Published At","Published at","id"]},"label":{"showLabel":false,"label":"Max Age"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false,"dataMapping":{"value":"Max Age","displayedFields":["Status","Host","Full Name","id","OS","Running Version","LTS","Cycle","Cycle Published At","End of Life","Max Age","Latest Version","Published at","Link"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"segments":{"tileSegmentsEnabled":true,"tileSegments":[]},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"74":{"type":"data","title":"Unique Versions","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| filter isNotNull(OS)\n| summarize countDistinct(`Full Name`)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(`Full Name`)","valueAxisLabel":"countDistinct(`Full Name`)","tooltipVariant":"single","categoryAxis":["countDistinct(`Full Name`)"],"valueAxis":["countDistinct(`Full Name`)"]}},"singleValue":{"showLabel":false,"label":"countDistinct(osVersion)","prefixIcon":"","recordField":"countDistinct(`Full Name`)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(`Full Name`)","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"countDistinct(osVersion)"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"countDistinct(osVersion)","dimension":"osVersionCount","displayedFields":["countDistinct(osVersion)"],"longitude":"osVersionCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false,"unitsOverrides":[{"identifier":"countDistinct(`Full Name`)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152448512}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"75":{"type":"data","title":"Hosts with OneAgent","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC\n| summarize count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["count()"],"valueAxis":["count()"],"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":false,"label":"Status","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value","sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":171.9479217529297,"[\"Status\"]":154.61459350585938},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":[],"dataMappings":{},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":[]},"label":{"showLabel":false,"label":"Max Age"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false,"dataMapping":{"value":"Max Age","dimension":"count()","displayedFields":["Status","Host","Full Name","id","OS","Running Version","LTS","Cycle","Cycle Published At","End of Life","Max Age","Latest Version","Published at","Link"],"longitude":"count()"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152457563}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"segments":{"tileSegmentsEnabled":true,"tileSegments":[]},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false}},"77":{"type":"data","title":"Unique Versions","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| summarize by:{Status, Technology, Edition, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Edition, Version\n| sort `Process Count` DESC\n| filter isNotNull(Technology)\n| summarize count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]}},"singleValue":{"showLabel":false,"label":"Technology Count","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"Technology Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"Technology Count","dimension":"TechnologyVersionCount","displayedFields":["Technology Count"],"longitude":"TechnologyVersionCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152491175}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"78":{"type":"data","title":"Operating Systems","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion != event.latestVersion, \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.latestVersion), \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC\n| filter isNotNull(OS)\n| summarize countDistinct(OS)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(OS)","valueAxisLabel":"countDistinct(OS)","tooltipVariant":"single","categoryAxis":["countDistinct(OS)"],"valueAxis":["countDistinct(OS)"]}},"singleValue":{"showLabel":false,"label":"countDistinct(osVersion)","prefixIcon":"","recordField":"countDistinct(OS)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"OS\"]":264.5625},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(OS)","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"countDistinct(osVersion)"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"countDistinct(osVersion)","dimension":"osCount","displayedFields":["countDistinct(osVersion)"],"longitude":"osCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false,"unitsOverrides":[{"identifier":"countDistinct(OS)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152434688}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"79":{"type":"data","title":"Library Instances","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"libraryVersionCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"libraryVersionCount","dimension":"libraryInstanceCount","displayedFields":["libraryVersionCount"],"longitude":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152394297}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"80":{"type":"data","title":"Technology Instances","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd Status = if(toTimestamp(event.eol) < now(), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort Status ASC, Technology ASC\n| summarize count()","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]}},"singleValue":{"showLabel":false,"label":"Process Count","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1728215429229}],"dataMapping":{"value":"Process Count","dimension":"technologyInstanceCount","displayedFields":["Process Count"],"longitude":"technologyInstanceCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"81":{"type":"data","title":"Processes with Obsolete Technology Versions","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter toTimestamp(event.eol) < now()\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟠\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟠\")"],"categoryAxisLabel":"concat(count, \"🟠\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"ApplicationObservabilitySignetIcon","recordField":"concat(count, \"🟠\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","isIconVisible":false,"trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟠\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"82":{"type":"data","title":"Processes with Updatable Technology Versions","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"🟡 Updatable\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isFalseOrNull(toTimestamp(event.eol) < now()) AND event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion)\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"83":{"type":"data","title":"Processes with Up-To-Date Technology Versions","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"🟢 Up-to-date\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter event.currentVersion == event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\"\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"84":{"type":"data","title":"Processes with Undocumented Technology Versions","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags\n| filter in(\"⚪ Undocumented\", $Status) AND (in($MZ, managementZones) OR $MZ == \" \") AND (in($Tag, tags) OR $Tag == \" \")\n| fieldsAdd softwareTechnologies\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter event.name == \"software-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| filter isNull(event.currentVersion) OR event.currentVersion == \"null\" OR isNull(event.latestVersion)\n| summarize count = countDistinct(id)\n| fields concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"85":{"type":"data","title":"Processes with Detected Library","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize countDistinct(id)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(id)","valueAxisLabel":"countDistinct(id)","tooltipVariant":"single","categoryAxis":["countDistinct(id)"],"valueAxis":["countDistinct(id)"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"countDistinct(id)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(id)","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false,"label":"libraryVersionCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"value":"libraryVersionCount","dimension":"processCount","displayedFields":["libraryVersionCount"],"longitude":"processCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"countDistinct(id)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152533621}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"93":{"type":"data","title":"Updatable Library Instances","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟡 Updatable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = count()\n| fields concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"94":{"type":"data","title":"Vulnerable Library Instances","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🔴 Vulnerable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🔴 Vulnerable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = count()\n| fields concat(count, \"🔴\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🔴\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🔴\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🔴\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🔴\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"95":{"type":"data","title":"Up-To-Date Library Instances","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟢 Up-to-date\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = count()\n| fields concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"96":{"type":"data","title":"Undocumented Library Instances","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"⚪ Undocumented\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = count()\n| fields concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"97":{"type":"data","title":"Processes with Vulnerable Library Versions","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🔴 Vulnerable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🔴 Vulnerable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🔴\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🔴\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🔴\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity","lastColonIndex","Vulnerability Score","age","event.dt.davis.timeout"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🔴\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🔴\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[],"autoSelectVisualization":false},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"98":{"type":"data","title":"Processes with Updatable Library Versions","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟡 Updatable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟡\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"99":{"type":"data","title":"Processes with Up-To-Date Library Versions","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟢 Up-to-date\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟢\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"100":{"type":"data","title":"Processes with Undocumented Library Versions","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"⚪ Undocumented\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\")\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter event.name == \"software-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \" \") AND (in($Tag, pgi.tags) OR $Tag == \" \")\n| summarize count = countDistinct(id)\n| fields concat(count, \"⚪\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"libraryInstanceCount","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740153091058}]},"timeframe":{"tileTimeframeEnabled":true,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},"layouts":{"0":{"x":0,"y":0,"w":12,"h":2},"1":{"x":12,"y":0,"w":12,"h":2},"7":{"x":0,"y":24,"w":4,"h":2},"8":{"x":0,"y":28,"w":4,"h":2},"13":{"x":0,"y":42,"w":4,"h":2},"14":{"x":0,"y":44,"w":4,"h":2},"17":{"x":0,"y":32,"w":24,"h":8},"18":{"x":0,"y":50,"w":24,"h":8},"19":{"x":0,"y":22,"w":24,"h":1},"21":{"x":0,"y":23,"w":24,"h":1},"22":{"x":0,"y":40,"w":24,"h":1},"23":{"x":0,"y":41,"w":24,"h":1},"24":{"x":0,"y":2,"w":24,"h":1},"25":{"x":0,"y":3,"w":24,"h":1},"32":{"x":0,"y":60,"w":6,"h":2},"33":{"x":0,"y":62,"w":3,"h":2},"34":{"x":3,"y":62,"w":3,"h":2},"35":{"x":0,"y":64,"w":3,"h":2},"36":{"x":3,"y":64,"w":3,"h":2},"37":{"x":12,"y":60,"w":6,"h":2},"39":{"x":12,"y":62,"w":3,"h":2},"40":{"x":15,"y":62,"w":3,"h":2},"41":{"x":12,"y":64,"w":3,"h":2},"42":{"x":15,"y":64,"w":3,"h":2},"43":{"x":18,"y":60,"w":6,"h":6},"44":{"x":0,"y":58,"w":24,"h":1},"45":{"x":0,"y":59,"w":24,"h":1},"48":{"x":6,"y":60,"w":6,"h":6},"49":{"x":0,"y":66,"w":24,"h":1},"51":{"x":8,"y":24,"w":4,"h":2},"52":{"x":8,"y":28,"w":4,"h":2},"53":{"x":8,"y":26,"w":4,"h":2},"54":{"x":4,"y":4,"w":4,"h":2},"55":{"x":4,"y":6,"w":4,"h":2},"56":{"x":8,"y":30,"w":4,"h":2},"57":{"x":4,"y":8,"w":4,"h":2},"58":{"x":4,"y":10,"w":4,"h":2},"65":{"x":12,"y":24,"w":12,"h":8},"66":{"x":12,"y":42,"w":12,"h":8},"68":{"x":0,"y":67,"w":12,"h":10},"69":{"x":12,"y":67,"w":12,"h":10},"71":{"x":4,"y":12,"w":4,"h":2},"72":{"x":8,"y":4,"w":16,"h":10},"73":{"x":0,"y":14,"w":24,"h":8},"74":{"x":0,"y":7,"w":4,"h":3},"75":{"x":0,"y":10,"w":4,"h":4},"77":{"x":0,"y":26,"w":4,"h":2},"78":{"x":0,"y":4,"w":4,"h":3},"79":{"x":0,"y":48,"w":4,"h":2},"80":{"x":0,"y":30,"w":4,"h":2},"81":{"x":4,"y":24,"w":4,"h":2},"82":{"x":4,"y":26,"w":4,"h":2},"83":{"x":4,"y":28,"w":4,"h":2},"84":{"x":4,"y":30,"w":4,"h":2},"85":{"x":0,"y":46,"w":4,"h":2},"93":{"x":8,"y":44,"w":4,"h":2},"94":{"x":8,"y":42,"w":4,"h":2},"95":{"x":8,"y":46,"w":4,"h":2},"96":{"x":8,"y":48,"w":4,"h":2},"97":{"x":4,"y":42,"w":4,"h":2},"98":{"x":4,"y":44,"w":4,"h":2},"99":{"x":4,"y":46,"w":4,"h":2},"100":{"x":4,"y":48,"w":4,"h":2}},"importedWithCode":true,"settings":{"defaultTimeframe":{"value":{"from":"-5m","to":"now()"},"enabled":true}}}
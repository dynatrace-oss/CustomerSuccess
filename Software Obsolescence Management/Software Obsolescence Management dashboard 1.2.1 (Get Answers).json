{"version":19,"variables":[{"version":1,"key":"Status","type":"csv","visible":true,"editable":true,"input":"🟢 Up-to-date,🟡 Updatable,🟠 Obsolete,🔴 Vulnerable,⚪ Undocumented,⚠️ Missing OneAgent","multiple":true,"defaultValue":["🟢 Up-to-date","🟡 Updatable","🟠 Obsolete","🔴 Vulnerable","⚠️ Missing OneAgent"]},{"version":1,"key":"MZ","type":"code","visible":true,"input":"import { settingsObjectsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  const config = { schemaIds: 'builtin:management-zones'};\n  const objects = await settingsObjectsClient.getSettingsObjects(config);\n  let managementZones = objects.items.map(el => el.value.name);\n  managementZones = [\"Any\", ...managementZones];\n  return managementZones;\n}","multiple":false,"defaultValue":"Any"},{"version":1,"key":"Tag","type":"code","visible":true,"input":"import { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nexport default async function() {\n  const objects = await queryExecutionClient.queryExecute({\n    body: {\n      query: 'fetch dt.entity.host, from: -15m | filter isNotNull(osVersion) | fieldsAdd tags | expand tags | filter isNotNull(tags) | summarize by:{tags}, count() | fields tags',\n      requestTimeoutMilliseconds: 10000,\n      maxResultRecords: 100000\n    },\n  });\n  return ['Any', ...objects.result.records.map(e => e.tags)];\n}","multiple":false,"defaultValue":"Any"},{"key":"SupportOverrides","visible":true,"type":"code","version":1,"editable":true,"input":"export default async function () {\n  /*\n  * Update the overrides constant below with your own support extensions or end of life documentation\n  * Add 'ESS': true if you contracted Dynatrace Enterprise Success and Support which includes OneAgent and ActiveGate extended support. If omitted, defaults to false.\n  * For operating systems, use the Full Name as key and define the extended support date (YYYY-MM-DD) as value.\n  * For technologies, use the : concatenation of Technology, Edition and Version as key. Edition can be null. And define the extended support date (YYYY-MM-DD) as value.\n  * Libraries most often have no proper end of life, except when they become affected by a vulnerability. Thus, it's not permitted to define overrides for libraries.\n  * You can review below a few commented examples of support extension definition\n  */\n  const overrides = {\n    'N/A': 'Edit this variable to define support overrides (for filling gaps or enforcing custom extended support dates', // Comment this line once you defined other support overrides\n    // 'ESS': true,\n    // 'Linux - Debian GNU/Linux 10 (buster) (kernel 5.10.233-224.894.amzn2.x86_64)': '2026-09-10',\n    // 'Debian GNU/Linux 12 (bookworm) (kernel 6.1.0-25-cloud-amd64)': '2026-10-30',\n    // 'Ubuntu 18.04.6 LTS (Bionic Beaver) (kernel 5.4.0-1089-azure)': '2026-10-30',\n    // 'Container-Optimized OS 113 (kernel 6.1.123+)': '2025-10-30',\n    // 'Amazon Linux 2 (kernel 5.10.197-186.748.amzn2.x86_64)': '2025-04-30',\n    // 'MONGODB_CLIENT:driver-core-only:3.2.2': '2025-10-30',\n    // 'ASP_DOTNET_CORE:null:6.0.2623.60506': '2025-10-30',\n    // 'LIBC:glibc:2.31': '2025-10-30',\n  };\n  /*\n  * Only modify the code section below if you know what you're doing.\n  * It is essentially converting the above object into a JSON string compatible with \n  * dashboard variables' format\n  */\n  const overridesVariableArray = [];\n  for(let override of Object.keys(overrides)) {\n    const overridesVariable = {};\n    overridesVariable[override] = overrides[override];\n    overridesVariableArray.push(JSON.stringify(overridesVariable));\n  }\n  console.log(overridesVariableArray);\n  return overridesVariableArray;\n}","multiple":true,"defaultValue":["3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"]}],"tiles":{"0":{"title":"","type":"code","input":"export default async function() {\n  return 'Software Obsolescence Management';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"1":{"type":"markdown","content":"#\n#### 💿 Stay Ahead Of Your Software Portfolio 💿\n\n "},"7":{"title":"Technologies","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| filter isNotNull(Technology)\n| summarize countDistinct(Technology)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(Technology)","valueAxisLabel":"countDistinct(Technology)","tooltipVariant":"single","categoryAxis":["countDistinct(Technology)"],"valueAxis":["countDistinct(Technology)"]}},"singleValue":{"showLabel":false,"label":"Technology Count","prefixIcon":"","recordField":"countDistinct(Technology)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(Technology)","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Technology Count"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"Technology Count","dimension":"Technology Count","displayedFields":["Technology Count"],"longitude":"Technology Count"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"countDistinct(Technology)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152485154}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"8":{"title":"Processes","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| summarize countDistinct(id)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(id)","valueAxisLabel":"countDistinct(id)","tooltipVariant":"single","categoryAxis":["countDistinct(id)"],"valueAxis":["countDistinct(id)"]}},"singleValue":{"showLabel":false,"label":"Process Count","prefixIcon":"","recordField":"countDistinct(id)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(id)","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"unitsOverrides":[{"identifier":"countDistinct(id)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1728215429229}],"dataMapping":{"value":"Process Count","dimension":"Process Count","displayedFields":["Process Count"],"longitude":"Process Count"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"13":{"title":"Libraries","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize countDistinct(Library)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(Library)","valueAxisLabel":"countDistinct(Library)","tooltipVariant":"single","categoryAxis":["countDistinct(Library)"],"valueAxis":["countDistinct(Library)"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryCount","prefixIcon":"","recordField":"countDistinct(Library)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"Library\"]":513.3958435058594},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(Library)","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"libraryCount","dimension":"libraryCount","displayedFields":["libraryCount"],"longitude":"libraryCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false,"unitsOverrides":[{"identifier":"countDistinct(Library)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152521161}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"14":{"title":"Library Versions","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize by:{Status, Technology, Library, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Library, Version\n| summarize count()","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryVersionCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"libraryVersionCount","dimension":"libraryVersionCount","displayedFields":["libraryVersionCount"],"longitude":"libraryVersionCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152527296}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"17":{"title":"Technology Instances","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields key, Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort `Time Before Obsolescence` ASC, Technology ASC","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["key","Status","Process","Technology","Edition","Running Version","LTS","Cycle","Cycle Published At","End of Life","Latest Version","Published at","id","Link"],"categoryAxisLabel":"key,Status,Process,Technology,Edition,Running Version,LTS,Cycle,Cycle Published At,End of Life,Latest Version,Published at,id,Link","valueAxis":["Max Age","Time Before Obsolescence"],"valueAxisLabel":"Max Age,Time Before Obsolescence","tooltipVariant":"single"},"xAxisLabel":"Time Before Obsolescence","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","hiddenLegendFields":["Max Age"],"leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":246,"[\"Status\"]":135.03125,"[\"Technology\"]":189.73959350585938,"[\"Management Zones\"]":259.625,"[\"Tags\"]":159},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Status\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Max Age"},"displayedFields":["key","Status","Process","Technology","Edition","Running Version","LTS","Cycle","Cycle Published At","End of Life","Latest Version","Published at","id","Link"]},"histogram":{"dataMappings":[{"valueAxis":"Max Age","rangeAxis":""},{"valueAxis":"Time Before Obsolescence","rangeAxis":""}],"variant":"single","displayedFields":["key","Status","Process","Technology","Edition","Running Version","Cycle Published At","Latest Version","Published at","id","Link"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Max Age"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"Max Age","displayedFields":["Status","Process","Technology","Edition","Running Version","id","Latest Version","Published at","Link","LTS","Cycle","Cycle Published At","End of Life","Max Age"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"18":{"title":"Library Instances","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| fields Status, Technology, Library, `Running Version` = Version, `Published At` = substring(event.currentVersionPublishedAt, to:10), `Latest Stable Version` = event.latestStableVersion, `Published at` = substring(event.latestStableVersionPublishedAt, to:10), Age = age, `Top Vulnerability`, `Vulnerability Score`, Licenses = event.licenses, Link = event.link, id\n| sort Status DESC, `Vulnerability Score` DESC, Technology ASC, Library ASC","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"Status,Technology,Library,Running Version,Published At,Latest Stable Version,Published at,Licenses,id,Link","valueAxisLabel":"Age,Vulnerability Score","tooltipVariant":"single","categoryAxis":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Licenses","id","Link"],"valueAxis":["Age","Vulnerability Score"]},"truncationMode":"middle","hiddenLegendFields":["entity"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"Library","prefixIcon":"","recordField":"Library","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125,"[\"Status\"]":160.1354217529297},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Age"},"displayedFields":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Licenses","id","Link"]},"histogram":{"dataMappings":[{"valueAxis":"Vulnerability Score","rangeAxis":""},{"valueAxis":"Age","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Library","Running Version","Published At","Published at","id"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Vulnerability Score"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"Vulnerability Score","dimension":"Status","displayedFields":["Status","Technology","Library","Running Version","Published At","Latest Stable Version","Published at","Age","Licenses","id","Link"],"longitude":"Age","latitude":"Vulnerability Score"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"19":{"title":"","type":"code","input":"export default async function() {\n  return 'Technologies';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"21":{"type":"markdown","content":"# "},"22":{"type":"markdown","content":"# "},"23":{"title":"","type":"code","input":"export default async function() {\n  return 'Libraries';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"24":{"type":"markdown","content":"# "},"25":{"title":"","type":"code","input":"export default async function() {\n  return 'Operating Systems';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"32":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  const config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== 'Any') config['managementZone'] = $MZ;\n  if($Tag !== 'Any') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count non-recent and unsupported running OneAgents\n  let oldOneAgents = 0;\n  let unsupportedOneAgents = 0;\n  for(let nonRecentOneAgent of nonRecentOneAgents) {\n    if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n      unsupportedOneAgents++;\n    } else {\n      oldOneAgents++;\n    }\n  }\n  // Multiply by the sampling factor to get more realistic stats\n  oldOneAgents = oldOneAgents * 100 / objects.percentageOfEnvironmentSearched;\n  unsupportedOneAgents = parseInt(unsupportedOneAgents * 100 / objects.percentageOfEnvironmentSearched);\n  const score = (unsupportedOneAgents > 0) ? 0 : ((oldOneAgents > 0) ? 0.5 : 1);\n  let result = {};\n  switch(true) {\n    case score === 1:\n      result = `✅ ${unsupportedOneAgents}`;\n      break;\n    case score === 0.5:\n      result = `💡 ${unsupportedOneAgents}`;\n      break;\n    case score === 0:\n      result = `⚠️ ${unsupportedOneAgents}`;\n      break;\n  }\n  return result;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"33":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  // List hosts that are running recent OneAgent versions\n  const config = {\n    agentVersionIs: \"GREATER_EQUAL\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== 'Any') config['managementZone'] = $MZ;\n  if($Tag !== 'Any') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let recentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count recent running OneAgents\n  recentOneAgents = recentOneAgents.length * 100 / objects.percentageOfEnvironmentSearched;\n  return recentOneAgents;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Recent OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952194742}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"34":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  const config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== 'Any') config['managementZone'] = $MZ;\n  if($Tag !== 'Any') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Count non-recent and unsupported running OneAgents\n  let oldOneAgents = 0;\n  let unsupportedOneAgents = 0;\n  for(let nonRecentOneAgent of nonRecentOneAgents) {\n    if(nonRecentOneAgent.hostInfo.agentVersion.minor < oldestSupportedVersion) {\n      unsupportedOneAgents++;\n    } else {\n      oldOneAgents++;\n    }\n  }\n  // Multiply by the sampling factor to get more realistic stats\n  return oldOneAgents * 100 / objects.percentageOfEnvironmentSearched;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Old but supported OneAgents","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952206500}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"35":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  return `1.${latestSupportedVersion}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest OneAgent version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"36":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  return `1.${oldestSupportedVersion}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported OneAgent","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"37":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \"Any\" && $Tag === \"Any\") {\n    // Determine the latest ActiveGate version supported by Dynatrace.\n    const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n    let objects = await clusterVersionClient.getVersion();\n    let latestSupportedVersion = objects.version.split('.')[1];\n    latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let unsupportedActiveGateCount = 0;\n    // Count unsupported ActiveGates\n    for(let activeGate of objects.activeGates) {\n      if(activeGate.version.substring(2, 5) < oldestSupportedVersion) unsupportedActiveGateCount++;\n    }\n    // Compute local score based on above number\n    const score = objects.activeGates.findIndex(el => el.version.substring(2, 5) < oldestSupportedVersion) > -1 ? 0 : (objects.activeGates.findIndex(el => el.version.substring(2, 5) < (latestSupportedVersion - 6)) > -1 ? 0.5 : 1);\n    let result = {};\n    switch(true) {\n      case score === 1:\n        result = `✅ ${unsupportedActiveGateCount}`;\n        break;\n      case score === 0.5:\n        result = `💡 ${unsupportedActiveGateCount}`;\n        break;\n      case score === 0:\n        result = `⚠️ ${unsupportedActiveGateCount}`;\n        break;\n    }\n   // Return the emojied result\n   return result;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Unsupported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"39":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \"Any\" && $Tag === \"Any\") {\n    // Determine the latest ActiveGate version supported by Dynatrace.\n    const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n    let objects = await clusterVersionClient.getVersion();\n    let latestSupportedVersion = objects.version.split('.')[1];\n    latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let recentActiveGateCount = 0;\n    // Count ActiveGates running with a recent version\n    for(let activeGate of objects.activeGates) {\n      if((activeGate.version.substring(2, 5) >= (latestSupportedVersion - 6))) recentActiveGateCount++;\n    }\n    return recentActiveGateCount;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Recent ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952236490}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"40":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \"Any\" && $Tag === \"Any\") {\n    // Determine the latest ActiveGate version supported by Dynatrace.\n    const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n    let objects = await clusterVersionClient.getVersion();\n    let latestSupportedVersion = objects.version.split('.')[1];\n    latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n    // Get all ActiveGates\n    objects = await activeGatesClient.getAllActiveGates();\n    let oldButSupportedActiveGateCount = 0;\n    // Count ActiveGates running with a version that is old but still supported\n    for(let activeGate of objects.activeGates) {\n      if((activeGate.version.substring(2, 5) >= oldestSupportedVersion) && (activeGate.version.substring(2, 5) < (latestSupportedVersion - 6))) oldButSupportedActiveGateCount++;\n    }\n    return oldButSupportedActiveGateCount;\n  } else {\n    return \"N/A\";\n  }\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":["element"],"valueAxisLabel":"element","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Old but supported ActiveGates","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"element","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"element"},"icon":{"showIcon":false,"icon":""},"unitsOverrides":[{"identifier":"element","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1733952243243}],"dataMapping":{"value":"element","displayedFields":[],"longitude":"element"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"41":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  return `1.${latestSupportedVersion}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Latest ActiveGate version (GA)","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"42":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function() {\n  // Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  return `1.${oldestSupportedVersion}`;\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"Oldest supported ActiveGate","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"legend":"auto","displayedFields":[],"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"43":{"title":"","type":"code","input":"import { clusterVersionClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { activeGatesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function() {\n  // Check if that tile should be activated based on selected indicators and scope\n  if($MZ === \"Any\" && $Tag === \"Any\") {\n    // Determine the latest ActiveGate version supported by Dynatrace.\n    const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n    let objects = await clusterVersionClient.getVersion();\n    let latestSupportedVersion = objects.version.split('.')[1];\n    latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n    const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n    const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n    objects = await activeGatesClient.getAllActiveGates();\n    const activeGates = objects.activeGates.map(el => {\n      const filteredEntry = {};\n      switch(true) {\n      case parseInt(el.version.substring(2,5)) < oldestSupportedVersion:\n        filteredEntry.Version = `⚠️ ${el.version}`;\n        break;\n      case parseInt(el.version.substring(2,5)) < (latestSupportedVersion - 6):\n        filteredEntry.Version = `💡 ${el.version}`;\n        break;\n      default:\n        filteredEntry.Version = `✅ ${el.version}`;\n      }\n      filteredEntry[\"Days Before Obsolescence\"] = (el.version.substring(2,5) - oldestSupportedVersion) * 2 * 7,\n      filteredEntry.ActiveGate = el.hostname;\n      return filteredEntry;\n    });\n  \n    return activeGates.sort(function (a, b) {\n      if (a.Version.substr(4, 3) > b.Version.substr(4, 3)) {\n        return 1;\n      }\n      if (a.Version.substr(4, 3) < b.Version.substr(4, 3)) {\n        return -1;\n      }\n      return 0;\n    });\n  } else {\n    return {\n      \"ActiveGate\": `N/A`\n    };\n  }\n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["Version","ActiveGate"],"categoryAxisLabel":"Version,ActiveGate","valueAxis":["Days Before Obsolescence"],"valueAxisLabel":"Days Before Obsolescence","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":true,"label":"oldest supported OneAgent","autoscale":false,"recordField":"Version","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"rowDensity":"condensed","columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"Days Before Obsolescence"},"legend":"auto","displayedFields":["Version","ActiveGate"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"Days Before Obsolescence","rangeAxis":""}],"variant":"single","displayedFields":["ActiveGate"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Days Before Obsolescence"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"Version","displayedFields":["Version","ActiveGate"],"value":"Days Before Obsolescence"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"44":{"type":"markdown","content":"# "},"45":{"title":"","type":"code","input":"export default async function() {\n  return 'Dynatrace';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"element"},"displayedFields":["element"],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"48":{"title":"","type":"code","input":"import { clusterVersionClient, oneAgentOnAHostClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\n\nexport default async function () {\n  /// Determine the latest OneAgent version supported by Dynatrace.\n  const ESS = $SupportOverrides.map(e => JSON.parse(e)).find(e => e.ESS === true) ? true : false;\n  let objects = await clusterVersionClient.getVersion();\n  let latestSupportedVersion = objects.version.split('.')[1];\n  latestSupportedVersion = latestSupportedVersion % 2 !== 0 ? latestSupportedVersion : latestSupportedVersion - 1;\n  const nonRecentOneAgentVersion = latestSupportedVersion - 6;\n  const oldestSupportedVersion = ESS ? latestSupportedVersion - 26 : latestSupportedVersion - 20;\n  // List hosts that are running non-recent (> 3 months old) OneAgent versions\n  let config = {\n    agentVersionIs: \"LOWER\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== 'Any') config['managementZone'] = $MZ;\n  if($Tag !== 'Any') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let nonRecentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Sort OneAgents by their version (ascending)\n  nonRecentOneAgents = nonRecentOneAgents.sort(function (a, b) {\n    if (a.hostInfo.agentVersion.minor > b.hostInfo.agentVersion.minor) {\n      return 1;\n    }\n    if (a.hostInfo.agentVersion.minor < b.hostInfo.agentVersion.minor) {\n      return -1;\n    }\n    return 0;\n  });\n  // Format final output\n  nonRecentOneAgents = nonRecentOneAgents.map((e) => {\n      const oneAgentVersion = '1.' + e.hostInfo.agentVersion.minor;\n      const result = {\n        \"OneAgent version\": (e.hostInfo.agentVersion.minor < oldestSupportedVersion ? `⚠️ ${oneAgentVersion}` : `💡 ${oneAgentVersion}`),\n        \"Days Before Obsolescence\": (e.hostInfo.agentVersion.minor - oldestSupportedVersion) * 2 * 7,\n        Host: e.hostInfo.displayName,\n        entityId: e.hostInfo.entityId\n      }\n      return result;\n  });\n  // List hosts that are running recent OneAgent versions\n  config = {\n    agentVersionIs: \"GREATER_EQUAL\",\n    agentVersionNumber: `1.${nonRecentOneAgentVersion}.0`,\n    includeDetails: false\n  };\n  if($MZ !== 'Any') config['managementZone'] = $MZ;\n  if($Tag !== 'Any') config['tag'] = [$Tag];\n  objects = await oneAgentOnAHostClient.getHostsWithSpecificAgents(config);\n  // Remove hosts with no OneAgent version detected\n  let recentOneAgents = objects.hosts.filter((e) => {\n    if(e.hostInfo.agentVersion && e.hostInfo.agentVersion.minor) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  // Sort OneAgents by their version (ascending)\n  recentOneAgents = recentOneAgents.sort(function (a, b) {\n    if (a.hostInfo.agentVersion.minor > b.hostInfo.agentVersion.minor) {\n      return 1;\n    }\n    if (a.hostInfo.agentVersion.minor < b.hostInfo.agentVersion.minor) {\n      return -1;\n    }\n    return 0;\n  });\n  // Format final output\n  recentOneAgents = recentOneAgents.map((e) => {\n      const oneAgentVersion = '1.' + e.hostInfo.agentVersion.minor;\n      const result = {\n        \"OneAgent version\": `✅ ${oneAgentVersion}`,\n        \"Days Before Obsolescence\": (e.hostInfo.agentVersion.minor - oldestSupportedVersion) * 2 * 7,\n        Host: e.hostInfo.displayName,\n        entityId: e.hostInfo.entityId\n      }\n      return result;\n  });\n  // Concatenate up to 500 non-recent OneAgents with up to 500 recent OneAgents\n  const allOneAgents = [...nonRecentOneAgents, ...recentOneAgents];\n  if(allOneAgents.length > 0) {\n    return allOneAgents;\n  } else {\n    return { \"No OneAgent found\": \"N/A\"};\n  }  \n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute","groupingThresholdValue":0,"valueType":"relative"},"categoricalBarChartSettings":{"categoryAxis":["OneAgent version","Host","entityId"],"categoryAxisLabel":"OneAgent version,Host,entityId","valueAxis":["Days Before Obsolescence"],"valueAxisLabel":"Days Before Obsolescence","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"OneAgent version","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"OneAgent version","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"columnWidths":{},"lineWrapIds":[["Host"]],"enableLineWrap":true,"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{"value":"Days Before Obsolescence"},"legend":"auto","displayedFields":["OneAgent version","Host","entityId"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"Days Before Obsolescence","rangeAxis":""}],"variant":"single","displayedFields":["OneAgent version","Host","entityId"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Time Before Obsolescence"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"OneAgent version","displayedFields":["OneAgent version","Host","entityId"],"value":"Time Before Obsolescence"},"tooltip":{},"unitsOverrides":[{"identifier":"Days Before Obsolescence","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740749747648}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"49":{"type":"markdown","content":"# "},"51":{"title":"Obsolete Technology Instances","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟠 Obsolete\")\n| summarize count = count()\n| fields concat(count, \"🟠\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟠\")"],"categoryAxisLabel":"concat(count, \"🟠\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"ApplicationObservabilitySignetIcon","recordField":"concat(count, \"🟠\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","isIconVisible":false,"trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟠\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"52":{"title":"Up-To-Date Technology Instances","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟢 Up-to-date\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| summarize count = count()\n| fields concat(count, \"🟢\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"53":{"title":"Updatable Technology Instances","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟡 Updatable\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| summarize count = count()\n| fields concat(count, \"🟡\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":["timeBeforeObsolescence","event.dt.davis.timeout"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":174,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"event.dt.davis.timeout"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"],"value":"event.dt.davis.timeout"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"54":{"title":"Hosts with Obsolete OS Version","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟠 Obsolete\")\n| summarize count = count()\n| fields concat(count, \"🟠\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟠\")"],"categoryAxisLabel":"concat(count, \"🟠\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟠\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟠\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"55":{"title":"Hosts with Updatable OS Version","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟡 Updatable\", $Status) AND isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| summarize count = count()\n| fields concat(count, \"🟡\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"56":{"title":"Undocumented Technology Instances","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"⚪ Undocumented\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| summarize count = count()\n| fields concat(count, \"⚪\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"57":{"title":"Hosts with Up-To-Date OS Version","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟢 Up-to-date\", $Status) AND isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| summarize count = count()\n| fields concat(count, \"🟢\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"58":{"title":"Hosts with Undocumented OS Version","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"⚪ Undocumented\", $Status) AND isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| summarize count = count()\n| fields concat(count, \"⚪\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"65":{"title":"Technology Version Distribution","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| summarize by:{Status, Technology, Edition, Version, timeBeforeObsolescence}, count = count()\n| fields Status, `Process Count` = count, `Time Before Obsolescence` = timeBeforeObsolescence, Technology, Edition, Version\n| sort `Time Before Obsolescence` ASC, `Process Count` DESC","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["Status","Technology","Edition","Version"],"categoryAxisLabel":"Status,Technology,Edition,Version","valueAxis":["Process Count","Time Before Obsolescence"],"valueAxisLabel":"Process Count,Time Before Obsolescence","tooltipVariant":"single"}},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Process Count"},"displayedFields":["Status","Technology","Edition","Version"]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""},{"valueAxis":"Time Before Obsolescence","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Edition","Version"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"Process Count","displayedFields":["Status","Process Count","Technology","Edition","Version"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"66":{"title":"Library Version Distribution","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize by:{Status, Technology, Library, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Library, Version\n| sort Status ASC, `Process Count` DESC","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["Status","Technology","Library","Version"],"valueAxis":["Process Count"],"categoryAxisLabel":"Status,Technology,Library,Version","valueAxisLabel":"Process Count","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"Library","prefixIcon":"","recordField":"Library","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":540.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"ascending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Process Count"},"displayedFields":["Status","Technology","Library","Version"]},"histogram":{"dataMappings":[{"valueAxis":"Process Count","rangeAxis":""}],"variant":"single","displayedFields":["Status","Technology","Library","Version"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"Process Count","dimension":"Status","displayedFields":["Status","Process Count","Technology","Library","Version"],"longitude":"Process Count"},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"68":{"type":"markdown","content":"##### Version: 1.2.1\n###### Author: Thomas Contassot\n###### Links:\n- [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management)\n- [Request For Enhancement](https://dt-url.net/som-rfe)\n###### Credits:\n- [endoflife.date](https://endoflife.date) (for OS and Technology obsolescence data)\n- [deps.dev](https://deps.dev) (for Library obsolescence data)\n- [Dynatrace AppSec](https://docs.dynatrace.com/docs/secure/application-security/vulnerability-analytics/vulnerabilities) (for Vulnerability insights)"},"69":{"type":"markdown","content":"##### Instructions\n###### Installation:\n1. Download from [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management) and [upload](https://docs.dynatrace.com/docs/analyze-explore-automate/dashboards-and-notebooks/dashboards-new/get-started/dashboards-use#dashboards-upload) the Dashboard's JSON to visualize the results of the continuous analysis (you've probably already done that)\n2. Download from [GitHub](https://github.com/dynatrace-oss/CustomerSuccess/tree/main/Software%20Obsolescence%20Management) and [upload](https://docs.dynatrace.com/docs/analyze-explore-automate/workflows/manage-workflows/workflows-upload) the workflow template's YAML to keep refreshing obsolescence data\n3. The workflow runs by default every 2mn from 4 to 6AM (UTC), 7 days a week. To optimize the cost of the solution, you can reduce its frequency, depending on the amount of entities in your tenant. Simply make sure it fully scans all entities at least once a week to guarantee the complete obsolescence analysis of your software inventory. Each hour of running workflow, it reviews 1000 OS, technologies and libraries. Do the math based on your monitored entities to optimize how many hours you need the workflow to run each week.\n4. [Allow outbound connections](https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections) to 'endoflife.date' and 'api.deps.dev' domains in the tenant's settings\n5. The dashboard will show exhaustive results at the end of the first full data refresh cycle (cf. step 2). Wait up to 24h to ensure the completeness of the obsolescence analysis.\n6. By default, the workflow is configured to raise a CUSTOM_INFO event on hosts 30 days before the obsolescence of their OS and another CUSTOM_INFO event when it's obsolete as a reminder to upgrade it before it impacts your security posture. To raise the awareness even more, open the JS code of the workflow and configure its variable \"alertThresholds\" so that a CUSTOM_ALERT problem is open in Dynatrace instead of just CUSTOM_INFO events attached to hosts. The same variable also lets you disable such event/alert automation, if needed. Review the top workflow code comments as other variables let you scope such alerting by tags and management zones.\n7. Some technologies still have no proper obsolescence documentation? Your organization got custom support extensions? You can answer those situations by providing your very own list of OS or technology support overrides in the \"SupportOverrides\" dashboard variable. Just edit it by following instructions in its code comment. Same edits must be replicated in the workflow's code to avoid false positive alerts.\n###### Usage:\n- Scope the audit by Management Zone or Tag by defining the corresponding variable (below the dashboard's title)\n- Filter which obsolescence statuses you need to display to stay focus\n- Prioritize your maintenance by vulnerability and obsolescence risk, criticity and radius of the affected software components\n- Share the filtered view's URL to the responsible team so that they keep their software safe and supported\n- Navigate to the associated entity by clicking any entry in the full-detail tables and then on \"Open record with\"\n- Extend your OneAgent coverage to reduce obsolescence risks. The [Discovery mode](https://www.dynatrace.com/platform/infrastructure-observability/foundation-and-discovery/) + [Code Module injection](https://docs.dynatrace.com/docs/observe/infrastructure-monitoring/hosts/monitoring-modes#code-module-injection) are sufficient for that capability.\n- [Activate AppSec](https://docs.dynatrace.com/docs/secure/application-security/application-protection) to reduce security risks from vulnerabilities. The [Discovery mode](https://www.dynatrace.com/platform/infrastructure-observability/foundation-and-discovery/) + [Code Module injection](https://docs.dynatrace.com/docs/observe/infrastructure-monitoring/hosts/monitoring-modes#code-module-injection) are sufficient for that capability.\n- Update the \"SupportOverrides\" variable with your own support terms (cf. installation step 7)\n- Track the solution's usage of the platform to understand and optimize its cost\n###### Update:\n1. Download the new JSON files whenever a new version is published in the open source GitHub repo\n2. Follow the installation instructions from the latest version\n3. Remove the previous version of the Dashboard and Workflow from your tenant"},"71":{"title":"Hosts missing OneAgent","type":"data","query":"// VMWare\n//from classic integration\nfetch dt.entity.virtualmachine, from: -15m\n| filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n| fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter], softwareObsolescenceManagement = entity.name\n//match with OneAgent hosts\n| lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n| fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n| lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n| fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n  ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n  tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n//add extension VMs\n| append [ fetch `dt.entity.vmware:virtualmachine`\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n  | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n//add OneAgent VMware hosts\n| append [ fetch dt.entity.host\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n  | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n  | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n| dedup id\n| filter matchesValue(monitoringStatus, \"CLOUD\")\n| fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]\n| summarize count = count()\n| fields concat(count, \"⚠️\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚠️\")"],"categoryAxisLabel":"concat(count, \"⚠️\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚠️\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Full Name\"]":207.4375},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"End of Life\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚠️\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"sum","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"72":{"title":"OS Version Distribution","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Extended Support`, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| append [ // VMWare\n  //from classic integration\n  fetch dt.entity.virtualmachine, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n  //match with OneAgent hosts\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  //add extension VMs\n  | append [ fetch `dt.entity.vmware:virtualmachine`\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n    | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n    | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n    | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n    | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n      ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n  //add OneAgent VMware hosts\n  | append [ fetch dt.entity.host\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n    | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | dedup id\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n]\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]\n| summarize by:{Status, `Full Name`, `Time Before Obsolescence`}, count = count()\n| fields Status, `Host Count` = count, `Time Before Obsolescence`, `Full Name`\n| sort `Time Before Obsolescence` ASC, `Host Count` DESC","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Status","Full Name"],"valueAxis":["Host Count","Time Before Obsolescence"],"categoryAxisLabel":"Status,Full Name","valueAxisLabel":"Host Count,Time Before Obsolescence","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Status","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value","sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":171.9479217529297,"[\"Status\"]":154.61459350585938},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Status","Full Name"],"dataMappings":{"value":"Host Count"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"Host Count","rangeAxis":""},{"valueAxis":"Time Before Obsolescence","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["Status","Full Name"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Count"},"icon":{"showIcon":false,"icon":""},"autoSelectVisualization":false,"dataMapping":{"value":"Count","dimension":"Status","displayedFields":["Status","Count","Full Name"],"longitude":"Count"},"tooltip":{}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"73":{"title":"Hosts","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Extended Support`, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| sort `Time Before Obsolescence` ASC\n| append [ // VMWare\n  //from classic integration\n  fetch dt.entity.virtualmachine, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudTags=tags, datacenterId=belongs_to[dt.entity.vmware_datacenter]\n  //match with OneAgent hosts\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | lookup [fetch dt.entity.vmware_datacenter], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  //add extension VMs\n  | append [ fetch `dt.entity.vmware:virtualmachine`\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n    | fieldsAdd host=arrayFirst(same_as[dt.entity.host]), ipAddress=vm_ip_address, cloudTags=array()\n    | lookup [fetch dt.entity.host | fieldsadd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\" //match with OneAgent hosts\n    | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n    | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n      ipAddress = if(monitored, host.ipAddress, else:ipAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)]\n  //add OneAgent VMware hosts\n  | append [ fetch dt.entity.host\n    | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"VMWARE\" AND isNull(runs_on[dt.entity.virtualmachine])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.geoloc_site]\n    | lookup [fetch dt.entity.geoloc_site], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | dedup id\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown VMWare VM OS\", id\n]\n| append [ // AWS\n  fetch dt.entity.ec2_instance, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress=arrayConcat(if(isNotNull(localIp), array(localIp), else: array()), if(isNotNull(publicIp), array(publicIp), else: array())),\n    cloudMonitored=isNotNull(accessible_by[dt.entity.aws_credentials]), cloudTags=tags, datacenterId=belongs_to[dt.entity.aws_availability_zone]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.aws_availability_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored=not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress=if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored,\"FULL\", else:if(oneAgentMonitored, \"OA\", else:\"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown AWS VM OS\", id\n]\n| append [ // GCP\n  fetch `dt.entity.cloud:gcp:gce_instance`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags, zone\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"),\n    tags=arrayConcat(cloudTags,host.tags), datacenter=zone\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"GOOGLE_CLOUD_PLATFORM\" AND isNull(runs_on[`dt.entity.cloud:gcp:gce_instance`])\n    | fieldsAdd datacenterId=belongs_to[dt.entity.gcp_zone]\n    | lookup [fetch dt.entity.gcp_zone], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n    | fields id, entity.name, ipAddress, monitoringStatus=\"OA\", tags, datacenter=datacenter.entity.name, datacenter.id=datacenterId]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown GCP VM OS\", id\n]\n| append [ // Azure\n  fetch dt.entity.azure_vm, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host], ipAddress, cloudMonitored=isNotNull(accessible_by[dt.entity.azure_subscription]),\n    cloudTags=tags, datacenterId=belongs_to[dt.entity.azure_region]\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | lookup [fetch dt.entity.azure_region], sourceField:datacenterId, lookupField:id, prefix:\"datacenter.\"\n  | fieldsAdd oneAgentMonitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(oneAgentMonitored, host.id, else:id), entity.name=if(oneAgentMonitored, host.entity.name, else:entity.name),\n    ipAddress = if(oneAgentMonitored, host.ipAddress, else:ipAddress), monitoringStatus=if(oneAgentMonitored AND cloudMonitored, \"FULL\", else: if(oneAgentMonitored, \"OA\", else: \"CLOUD\")),\n    tags=arrayConcat(host.tags,cloudTags), datacenter=datacenter.entity.name, datacenter.id=datacenterId\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Azure VM OS\", id\n]\n| append [ // Hyper-V\n  fetch `dt.entity.hyperv:virtual_machine`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=same_as[dt.entity.host][0], ip_address, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:ip_address), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"HYPER_V\" AND cloudType != \"AZURE\" AND isNull(same_as[`dt.entity.hyperv:virtual_machine`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Hyper-V VM OS\", id\n]\n| append [ // Nutanix\n  fetch `dt.entity.nutanix:vm`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=same_as[dt.entity.host][0], IpAddress, cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], sourceField:host, lookupField:id, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),\n    ipAddress = if(monitored, host.ipAddress, else:IpAddress), monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(host.tags,cloudTags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND hypervisorType == \"AHV\" AND isNull(same_as[`dt.entity.nutanix:vm`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\", tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Nutanix VM OS\", id\n]\n| append [ // Oracle\n  fetch `dt.entity.cloud:oci:compute`, from: -15m\n  | filter in(\"⚠️ Missing OneAgent\", $Status) AND $MZ == \"Any\" AND $Tag == \"Any\"\n  | fieldsAdd host=runs[dt.entity.host][0], cloudTags=tags\n  | lookup [fetch dt.entity.host | fieldsAdd isMonitoringCandidate, tags], lookupField: id, sourceField:host, prefix:\"host.\"\n  | fieldsAdd monitored = not(isTrueOrNull(host.isMonitoringCandidate))\n  | fields id=if(monitored, host.id, else:id), entity.name=if(monitored, host.entity.name, else:entity.name),monitoringStatus=if(monitored, \"FULL\", else:\"CLOUD\"), tags=arrayConcat(cloudTags,host.tags)\n  | append [ fetch dt.entity.host\n    | filter isNotNull(monitoringMode) AND cloudType == \"ORACLE\" AND isNull(runs_on[`dt.entity.cloud:oci:compute`])\n    | fields id,entity.name,ipAddress,monitoringStatus=\"OA\",tags]\n  | filter matchesValue(monitoringStatus, \"CLOUD\")\n  | fields Status = \"⚠️ Missing OneAgent\", Host = entity.name, `Full Name` =\"Unknown Oracle VM OS\", id\n]","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Status","Host","Host Group","OS","Running Version","Full Name","LTS","Cycle","Cycle Published At","End of Life","Extended Support","Latest Version","Published at","Link","id"],"valueAxis":["Max Age","Time Before Obsolescence"],"categoryAxisLabel":"Status,Host,Host Group,OS,Running Version,Full Name,LTS,Cycle,Cycle Published At,End of Life,Extended Support,Latest Version,Published at,Link,id","valueAxisLabel":"Max Age,Time Before Obsolescence","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Status","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value","sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":true,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":145.9479217529297,"[\"Status\"]":149.61459350585938,"[\"managementZones\"]":176.69793701171875,"[\"tags\"]":157,"[\"Host\"]":214.90625,"[\"Full Name\"]":411.01043701171875},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Status\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Status","Host","Host Group","OS","Running Version","Full Name","LTS","Cycle","Cycle Published At","End of Life","Extended Support","Latest Version","Published at","Link","id"],"dataMappings":{"value":"Max Age"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"Max Age","rangeAxis":""},{"valueAxis":"Time Before Obsolescence","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["Status","Host","Host Group","Full Name","Cycle Published At","Published at","id"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Max Age"},"icon":{"showIcon":false,"icon":""},"autoSelectVisualization":false,"dataMapping":{"value":"Max Age","displayedFields":["Status","Host","Full Name","id","OS","Running Version","LTS","Cycle","Cycle Published At","End of Life","Max Age","Latest Version","Published at","Link"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true},"segments":{"tileSegments":[],"tileSegmentsEnabled":true}},"74":{"title":"Unique Versions","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| filter isNotNull(OS)\n| summarize countDistinct(`Full Name`)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(`Full Name`)","valueAxisLabel":"countDistinct(`Full Name`)","tooltipVariant":"single","categoryAxis":["countDistinct(`Full Name`)"],"valueAxis":["countDistinct(`Full Name`)"]}},"singleValue":{"showLabel":false,"label":"countDistinct(osVersion)","prefixIcon":"","recordField":"countDistinct(`Full Name`)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(`Full Name`)","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"countDistinct(osVersion)"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"countDistinct(osVersion)","dimension":"osVersionCount","displayedFields":["countDistinct(osVersion)"],"longitude":"osVersionCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false,"unitsOverrides":[{"identifier":"countDistinct(`Full Name`)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152448512}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"75":{"title":"Hosts with OneAgent","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| summarize count()","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["count()"],"valueAxis":["count()"],"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":false,"label":"Status","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value","sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"OS\"]":171.9479217529297,"[\"Status\"]":154.61459350585938},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":[],"dataMappings":{},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Max Age"},"icon":{"showIcon":false,"icon":""},"autoSelectVisualization":false,"dataMapping":{"value":"Max Age","dimension":"count()","displayedFields":["Status","Host","Full Name","id","OS","Running Version","LTS","Cycle","Cycle Published At","End of Life","Max Age","Latest Version","Published at","Link"],"longitude":"count()"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152457563}]},"querySettings":{"maxResultRecords":100000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":100,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true},"segments":{"tileSegments":[],"tileSegmentsEnabled":true}},"77":{"title":"Unique Versions","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| summarize by:{Status, Technology, Edition, Version}, count = count()\n| fields Status, `Process Count` = count, Technology, Edition, Version\n| filter isNotNull(Technology)\n| summarize count()","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]}},"singleValue":{"showLabel":false,"label":"Technology Count","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Technology Count"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"Technology Count","dimension":"TechnologyVersionCount","displayedFields":["Technology Count"],"longitude":"TechnologyVersionCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152491175}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"78":{"title":"Operating Systems","type":"data","query":"fetch dt.entity.host, from: -15m\n| fieldsAdd osVersion, managementZones, hostGroupName, tags, softwareObsolescenceManagement = entity.name\n| filter isNotNull(osVersion) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.os-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:osVersion,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), osVersion, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), osVersion, from: 0) +\n        stringLength(osVersion) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), osVersion, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(timeBeforeObsolescence), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Host = entity.name, `Host Group` = hostGroupName, `Management Zones` = managementZones, `Tags` = tags, OS = event.os, `Running Version` = event.currentVersion, `Full Name` = osVersion, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| filter isNotNull(OS)\n| summarize countDistinct(OS)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(OS)","valueAxisLabel":"countDistinct(OS)","tooltipVariant":"single","categoryAxis":["countDistinct(OS)"],"valueAxis":["countDistinct(OS)"]}},"singleValue":{"showLabel":false,"label":"countDistinct(osVersion)","prefixIcon":"","recordField":"countDistinct(OS)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"OS\"]":264.5625},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(OS)","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"countDistinct(osVersion)"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"countDistinct(osVersion)","dimension":"osCount","displayedFields":["countDistinct(osVersion)"],"longitude":"osCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false,"unitsOverrides":[{"identifier":"countDistinct(OS)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152434688}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"79":{"title":"Library Instances","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count()","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryVersionCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"libraryVersionCount","dimension":"libraryInstanceCount","displayedFields":["libraryVersionCount"],"longitude":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152394297}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"80":{"title":"Technology Instances","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| fields Status, Process, `Management Zones` = managementZones, `Tags` = tags, Technology, Edition, `Running Version` = Version, LTS = event.lts, Cycle = event.currentCycle, `Cycle Published At` = substring(event.currentCyclePublishedAt, to:10), `End of Life` = event.eol, `Max Age` = age, `Time Before Obsolescence` = timeBeforeObsolescence, `Latest Version` = event.latestVersion, `Published at` = substring(event.latestVersionPublishedAt, to:10), Link = event.link, id\n| summarize count()","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxisLabel":"count()","valueAxisLabel":"count()","tooltipVariant":"single","categoryAxis":["count()"],"valueAxis":["count()"]}},"singleValue":{"showLabel":false,"label":"Process Count","prefixIcon":"","recordField":"count()","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"Process Count"},"icon":{"showIcon":false,"icon":""},"unitsOverrides":[{"identifier":"count()","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1728215429229}],"dataMapping":{"value":"Process Count","dimension":"technologyInstanceCount","displayedFields":["Process Count"],"longitude":"technologyInstanceCount"},"tooltip":{"showCustomFields":false},"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"81":{"title":"Processes with Obsolete Technology Versions","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟠 Obsolete\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟠 Obsolete\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟠\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟠\")"],"categoryAxisLabel":"concat(count, \"🟠\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"ApplicationObservabilitySignetIcon","recordField":"concat(count, \"🟠\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","isIconVisible":false,"trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟠\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"82":{"title":"Processes with Updatable Technology Versions","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟡 Updatable\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟡\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"83":{"title":"Processes with Up-To-Date Technology Versions","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"🟢 Up-to-date\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟢\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"84":{"title":"Processes with Undocumented Technology Versions","type":"data","query":"fetch dt.entity.process_group_instance, from: -15m\n| fieldsAdd Process = entity.name, softwareTechnologies, managementZones, tags, softwareObsolescenceManagement = entity.name\n| filter in(\"⚪ Undocumented\", $Status) AND (in($MZ, managementZones) OR $MZ == \"Any\") AND (in($Tag, tags) OR $Tag == \"Any\")\n| expand softwareTechnologies\n| parse softwareTechnologies, \"'type:' LD:Technology ',edition:' LD:Edition ',version:' LD:Version\"\n| fieldsAdd key = concat(Technology, \":\", Edition, \":\", Version)\n| fieldsAdd result = lookup([\n  fetch events, from: -7d\n  | filter dt.system.bucket == \"default_davis_custom_events\"\n  | filter event.name == \"software-obsolescence-management.technology-info\"\n  | sort timestamp DESC\n  ],\n  sourceField:key,\n  lookupField:key\n)\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd `Extended Support` = if(\n  ((indexOf(toString(array($SupportOverrides)), key, from: 0) >= 0) AND (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) >= 0)),\n  substring(\n      toString(array($SupportOverrides)),\n      from: (\n        (indexOf(toString(array($SupportOverrides)), key, from: 0) +\n        stringLength(key) +\n        5)\n      ),\n      to: (indexOf(toString(array($SupportOverrides)), \"}\", from: indexOf(toString(array($SupportOverrides)), key, from: 0)) - 2)\n    ),\n    else: null\n)\n| fieldsAdd age = now() - toTimestamp(event.currentCyclePublishedAt)\n| fieldsAdd timeBeforeObsolescence = toTimestamp(if(isNotNull(`Extended Support`), `Extended Support`, else: event.eol)) - now()\n| fieldsAdd Status = if(timeBeforeObsolescence < toDuration(0), \"🟠 Obsolete\")\n| fieldsAdd Status = if(isNull(Status) AND event.currentVersion == event.latestVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND (isNotNull(timeBeforeObsolescence) OR (event.currentVersion != event.latestVersion AND isNotNull(event.currentVersion) AND event.currentVersion != \"null\" AND isNotNull(event.latestVersion))), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"⚪\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","truncationMode":"middle","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"hiddenLegendFields":[]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"id\"]":37,"[\"entity.name\"]":319.2632751464844,"[\"Edition\"]":199.36553192138672,"[\"Version\"]":125.23106384277344,"[\"Process Group\"]":403.2632751464844,"[\"Process\"]":631,"[\"Status\"]":197.03125,"[\"Technology\"]":227.73959350585938},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Technology\"]","direction":"unset"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"85":{"title":"Processes with Detected Library","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, $Status)\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize countDistinct(id)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxisLabel":"countDistinct(id)","valueAxisLabel":"countDistinct(id)","tooltipVariant":"single","categoryAxis":["countDistinct(id)"],"valueAxis":["countDistinct(id)"]},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"libraryVersionCount","prefixIcon":"","recordField":"countDistinct(id)","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(id)","rangeAxis":""}],"variant":"single","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryVersionCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"value":"libraryVersionCount","dimension":"processCount","displayedFields":["libraryVersionCount"],"longitude":"processCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"countDistinct(id)","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740152533621}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"93":{"title":"Updatable Library Instances","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟡 Updatable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = count()\n| fields concat(count, \"🟡\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"94":{"title":"Vulnerable Library Instances","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🔴 Vulnerable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🔴 Vulnerable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = count()\n| fields concat(count, \"🔴\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🔴\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🔴\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🔴\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🔴\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"95":{"title":"Up-To-Date Library Instances","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟢 Up-to-date\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = count()\n| fields concat(count, \"🟢\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"96":{"title":"Undocumented Library Instances","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"⚪ Undocumented\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = count()\n| fields concat(count, \"⚪\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"libraryInstanceCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"97":{"title":"Processes with Vulnerable Library Versions","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🔴 Vulnerable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🔴 Vulnerable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🔴\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🔴\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🔴\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity","lastColonIndex","Vulnerability Score","age","event.dt.davis.timeout"],"xAxisLabel":"event.timestamp","xAxisIsLabelVisible":false,"valueRepresentation":"absolute","leftYAxisSettings":{}},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🔴\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🔴\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[],"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"98":{"title":"Processes with Updatable Library Versions","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟡 Updatable\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟡 Updatable\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟡\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟡\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟡\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟡\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟡\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"99":{"title":"Processes with Up-To-Date Library Versions","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"🟢 Up-to-date\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"🟢 Up-to-date\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"🟢\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"🟢\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"🟢\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"🟢\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"🟢\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"100":{"title":"Processes with Undocumented Library Versions","type":"data","query":"fetch dt.entity.software_component, from: -15m\n| filter in(\"⚪ Undocumented\", $Status)\n| fieldsAdd lastColonIndex = lastIndexOf(entity.name, \":\"), softwareObsolescenceManagement = entity.name\n| fieldsAdd Technology = softwareComponentType\n| fieldsAdd Library = substring(entity.name, to:lastColonIndex)\n| fieldsAdd Version = softwareComponentVersion\n| fieldsAdd result = lookup([\n      fetch events, from: -7d\n      | filter dt.system.bucket == \"default_davis_custom_events\"\n      | filter event.name == \"software-obsolescence-management.library-info\"\n      | sort timestamp DESC\n    ],\n    sourceField:entity.name,\n    lookupField:key)\n| fieldsAdd `Top Vulnerability` = lookup([\n      fetch events\n      | filter event.provider==\"Dynatrace\"\n      | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\"\n      | filter event.level==\"VULNERABILITY\"\n      | sort vulnerability.davis_assessment.score DESC\n      | expand softwareComponentId = affected_entities.vulnerable_components.ids\n    ],\n    sourceField:id,\n    lookupField:softwareComponentId)\n| fieldsAdd `Vulnerability Score` = `Top Vulnerability`[vulnerability.davis_assessment.score]\n| fieldsFlatten result, prefix:\"event.\"\n| fieldsAdd age = now() - toTimestamp(event.currentVersionPublishedAt)\n| fieldsAdd Status = if(isNotNull(`Top Vulnerability`), \"🔴 Vulnerable\")\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion) AND event.currentVersion == event.latestStableVersion, \"🟢 Up-to-date\", else: Status)\n| fieldsAdd Status = if(isNull(Status) AND isNotNull(event.currentVersion) AND isNotNull(event.latestStableVersion), \"🟡 Updatable\", else: Status)\n| fieldsAdd Status = if(isNull(Status), \"⚪ Undocumented\", else: Status)\n| filter in(Status, \"⚪ Undocumented\")\n| expand id = belongs_to[dt.entity.process_group_instance]\n| fieldsAdd pg = lookup([\n      fetch dt.entity.process_group_instance\n      | fieldsAdd managementZones, tags\n    ],\n    sourceField:id,\n    lookupField:id)\n| fieldsFlatten pg, prefix:\"pgi.\"\n| filter (in($MZ, pgi.managementZones) OR $MZ == \"Any\") AND (in($Tag, pgi.tags) OR $Tag == \"Any\")\n| summarize count = countDistinct(id)\n| fields concat(count, \"⚪\")","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"categoryAxis":["concat(count, \"⚪\")"],"valueAxis":[],"categoryAxisLabel":"concat(count, \"⚪\")","valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","hiddenLegendFields":["entity"]},"singleValue":{"showLabel":false,"label":"sum","prefixIcon":"","recordField":"concat(count, \"⚪\")","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{"[\"File name\"]":249.2291717529297,"[\"Library\"]":194.03125,"[\"Latest Stable Version\"]":98.82292175292969,"[\"Running Version\"]":143.6041717529297,"[\"Link\"]":349.53125,"[\"Description\"]":196.125},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"Top Vulnerability\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical","dataMappings":{},"displayedFields":[]},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["concat(count, \"⚪\")"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false,"label":"libraryInstanceCount"},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"processCount","displayedFields":["sum"],"value":"libraryInstanceCount"},"tooltip":{"showCustomFields":false},"unitsOverrides":[{"identifier":"libraryInstanceCount","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1740153091058}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":true}},"101":{"type":"markdown","content":"# "},"102":{"title":"","type":"code","input":"export default async function() {\n  return 'Platform usage of the Software Obsolescence Management solution';\n}","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["element"],"categoryAxisLabel":"element","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"truncationMode":"middle","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"}},"singleValue":{"showLabel":false,"label":"element","autoscale":false,"recordField":"element","trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"square","dataMappings":{},"displayedFields":[],"legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"dataMappings":[],"variant":"single","displayedFields":["element"]},"valueBoundaries":{"min":"auto","max":"auto"},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"dataMapping":{"dimension":"element","displayedFields":["element"]},"tooltip":{"showCustomFields":false}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"103":{"title":"Total scanned bytes by the Software Obsolescence Management solution","type":"data","query":"fetch dt.system.events\n| filter contains(query_string, \"softwareObsolescenceManagement\")\n| fields timestamp, component = if(client.application_context == \"dynatrace.dashboards\", \"Dashboard\", else: \"Workflow\"), scanned_bytes\n| summarize sum(scanned_bytes)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["sum(scanned_bytes)"],"valueAxis":["sum(scanned_bytes)"],"categoryAxisLabel":"sum(scanned_bytes)","valueAxisLabel":"sum(scanned_bytes)","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle","xAxisLabel":"timeframe","xAxisIsLabelVisible":false,"hiddenLegendFields":["VERSION","delivered_records","execution_duration_ms","query_end","query_queue_time_ms","query_start","sampling_ratio","scanned_bytes","scanned_data_points","scanned_records","failed_count","billed_bytes","billed_invocations","function.duration_sec","function.memory_mib","interval"],"leftYAxisSettings":{}},"singleValue":{"showLabel":false,"label":"query_id","prefixIcon":"DqlSignetIcon","recordField":"sum(scanned_bytes)","autoscale":true,"sparklineSettings":{"record":"sum(scanned_bytes)"},"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value","isIconVisible":false},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[],"sortBy":{"columnId":"[\"timestamp\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto","ratio":"auto"},"dataMappings":{},"displayedFields":[],"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"sum(scanned_bytes)","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":[]},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false,"dataMapping":{"value":"VERSION"},"label":{"showLabel":false,"label":"VERSION"},"unitsOverrides":[{"identifier":"sum(scanned_bytes)","unitCategory":"data","baseUnit":"byte","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1741649267987}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":false},"segments":{"tileSegments":[],"tileSegmentsEnabled":false}},"104":{"title":"DQL queries per component of the Software Obsolescence Management solution","type":"data","query":"fetch dt.system.events\n| filter contains(query_string, \"softwareObsolescenceManagement\") AND scanned_bytes != 0\n| fields timestamp, component = if(client.application_context == \"dynatrace.dashboards\", \"Dashboard\", else: \"Workflow\"), scanned_bytes\n| makeTimeseries `Query count` = count(), by:{component}, interval: 1h","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["component"],"valueAxis":["interval"],"categoryAxisLabel":"component","valueAxisLabel":"interval","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle","fieldMapping":{"timestamp":"timeframe","leftAxisValues":["Query count"]},"xAxisLabel":"timeframe","xAxisIsLabelVisible":false,"hiddenLegendFields":["VERSION","delivered_records","execution_duration_ms","query_end","query_queue_time_ms","query_start","sampling_ratio","scanned_bytes","scanned_data_points","scanned_records","failed_count","billed_bytes","billed_invocations","function.duration_sec","function.memory_mib","interval"],"leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"query_id","prefixIcon":"","recordField":"query_id","autoscale":true,"sparklineSettings":{"record":"sum(scanned_bytes)"},"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[{"fields":["Query count"],"value":"sparkline","id":1741651648320}],"sortBy":{"columnId":"[\"timestamp\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto","ratio":"auto"},"dataMappings":{"value":"component"},"displayedFields":["component"],"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"interval","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["component"]},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false,"dataMapping":{"value":"VERSION"},"label":{"showLabel":false,"label":"VERSION"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":false},"segments":{"tileSegments":[],"tileSegmentsEnabled":false}},"105":{"title":"Scanned bytes per component of the Software Obsolescence Management solution","type":"data","query":"fetch dt.system.events\n| filter contains(query_string, \"softwareObsolescenceManagement\") AND scanned_bytes != 0\n| fields timestamp, component = if(client.application_context == \"dynatrace.dashboards\", \"Dashboard\", else: \"Workflow\"), scanned_bytes\n| makeTimeseries `Scanned bytes` = sum(scanned_bytes), by:{component}, interval: 1h","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["component"],"valueAxis":["interval"],"categoryAxisLabel":"component","valueAxisLabel":"interval","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle","fieldMapping":{"timestamp":"timeframe","leftAxisValues":["Scanned bytes"]},"xAxisLabel":"timeframe","xAxisIsLabelVisible":false,"hiddenLegendFields":["VERSION","delivered_records","execution_duration_ms","query_end","query_queue_time_ms","query_start","sampling_ratio","scanned_bytes","scanned_data_points","scanned_records","failed_count","billed_bytes","billed_invocations","function.duration_sec","function.memory_mib","interval"],"leftYAxisSettings":{}},"singleValue":{"showLabel":true,"label":"query_id","prefixIcon":"","recordField":"query_id","autoscale":true,"sparklineSettings":{"record":"sum(scanned_bytes)"},"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[{"fields":["Scanned bytes"],"value":"sparkline","id":1741651871132}],"sortBy":{"columnId":"[\"timestamp\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto","ratio":"auto"},"dataMappings":{"value":"component"},"displayedFields":["component"],"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"interval","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["component"]},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false,"dataMapping":{"value":"VERSION"},"label":{"showLabel":false,"label":"VERSION"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-2h","to":"now()"},"tileTimeframeEnabled":false},"segments":{"tileSegments":[],"tileSegmentsEnabled":false}}},"layouts":{"0":{"x":0,"y":0,"w":12,"h":2},"1":{"x":12,"y":0,"w":12,"h":2},"7":{"x":0,"y":24,"w":4,"h":2},"8":{"x":0,"y":28,"w":4,"h":2},"13":{"x":0,"y":42,"w":4,"h":2},"14":{"x":0,"y":44,"w":4,"h":2},"17":{"x":0,"y":32,"w":24,"h":8},"18":{"x":0,"y":50,"w":24,"h":8},"19":{"x":0,"y":22,"w":24,"h":1},"21":{"x":0,"y":23,"w":24,"h":1},"22":{"x":0,"y":40,"w":24,"h":1},"23":{"x":0,"y":41,"w":24,"h":1},"24":{"x":0,"y":2,"w":24,"h":1},"25":{"x":0,"y":3,"w":24,"h":1},"32":{"x":0,"y":60,"w":6,"h":2},"33":{"x":0,"y":62,"w":3,"h":2},"34":{"x":3,"y":62,"w":3,"h":2},"35":{"x":0,"y":64,"w":3,"h":2},"36":{"x":3,"y":64,"w":3,"h":2},"37":{"x":12,"y":60,"w":6,"h":2},"39":{"x":12,"y":62,"w":3,"h":2},"40":{"x":15,"y":62,"w":3,"h":2},"41":{"x":12,"y":64,"w":3,"h":2},"42":{"x":15,"y":64,"w":3,"h":2},"43":{"x":18,"y":60,"w":6,"h":6},"44":{"x":0,"y":58,"w":24,"h":1},"45":{"x":0,"y":59,"w":24,"h":1},"48":{"x":6,"y":60,"w":6,"h":6},"49":{"x":0,"y":66,"w":24,"h":1},"51":{"x":8,"y":24,"w":4,"h":2},"52":{"x":8,"y":28,"w":4,"h":2},"53":{"x":8,"y":26,"w":4,"h":2},"54":{"x":4,"y":4,"w":4,"h":2},"55":{"x":4,"y":6,"w":4,"h":2},"56":{"x":8,"y":30,"w":4,"h":2},"57":{"x":4,"y":8,"w":4,"h":2},"58":{"x":4,"y":10,"w":4,"h":2},"65":{"x":12,"y":24,"w":12,"h":8},"66":{"x":12,"y":42,"w":12,"h":8},"68":{"x":0,"y":77,"w":12,"h":10},"69":{"x":12,"y":77,"w":12,"h":10},"71":{"x":4,"y":12,"w":4,"h":2},"72":{"x":8,"y":4,"w":16,"h":10},"73":{"x":0,"y":14,"w":24,"h":8},"74":{"x":0,"y":7,"w":4,"h":3},"75":{"x":0,"y":10,"w":4,"h":4},"77":{"x":0,"y":26,"w":4,"h":2},"78":{"x":0,"y":4,"w":4,"h":3},"79":{"x":0,"y":48,"w":4,"h":2},"80":{"x":0,"y":30,"w":4,"h":2},"81":{"x":4,"y":24,"w":4,"h":2},"82":{"x":4,"y":26,"w":4,"h":2},"83":{"x":4,"y":28,"w":4,"h":2},"84":{"x":4,"y":30,"w":4,"h":2},"85":{"x":0,"y":46,"w":4,"h":2},"93":{"x":8,"y":44,"w":4,"h":2},"94":{"x":8,"y":42,"w":4,"h":2},"95":{"x":8,"y":46,"w":4,"h":2},"96":{"x":8,"y":48,"w":4,"h":2},"97":{"x":4,"y":42,"w":4,"h":2},"98":{"x":4,"y":44,"w":4,"h":2},"99":{"x":4,"y":46,"w":4,"h":2},"100":{"x":4,"y":48,"w":4,"h":2},"101":{"x":0,"y":76,"w":24,"h":1},"102":{"x":0,"y":67,"w":24,"h":1},"103":{"x":0,"y":68,"w":8,"h":8},"104":{"x":8,"y":72,"w":16,"h":4},"105":{"x":8,"y":68,"w":16,"h":4}},"importedWithCode":true,"settings":{"defaultTimeframe":{"value":{"from":"now()-7d","to":"now()"},"enabled":true}}}